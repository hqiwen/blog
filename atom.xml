<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知秋</title>
  
  <subtitle>a little happy to share with you</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hqiwen.github.io/"/>
  <updated>2019-03-10T06:15:02.730Z</updated>
  <id>https://hqiwen.github.io/</id>
  
  <author>
    <name>贺启文</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构之排序</title>
    <link href="https://hqiwen.github.io/2019/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%8E%92%E5%BA%8F/"/>
    <id>https://hqiwen.github.io/2019/03/10/数据结构之排序/</id>
    <published>2019-03-10T03:27:57.000Z</published>
    <updated>2019-03-10T06:15:02.730Z</updated>
    
    <content type="html"><![CDATA[<p>排序就是将一组对象按照某种逻辑重新排列的过程。</p><h2 id="初级排序算法"><a href="#初级排序算法" class="headerlink" title="初级排序算法"></a>初级排序算法</h2><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>不断重复找到最小的元素，移到相应位置。{0-N} = {0, 1, 2,..N}, {n} = swap( nums[n], min{ nums[n~nums.length] } )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>; i&lt; nums.length; i++) &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = i; j &lt; nums.length; j++) &#123;</div><div class="line">        minNum = min(minNum, nums[j]);</div><div class="line">    &#125;</div><div class="line">    swap(minNum, nums[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>有 N 次交换和N+(N-1)+..+2+1~N^2/2次比较</p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>每次将一个数插入有序数组的适当位置。{0-N} = {0, 1, 2,..N},{n} = { nums[0~n]}.swap( less(nums[n], nums[n-1]) )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length; i++) &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = i; j &gt;<span class="number">0</span>; j--)&#123;</div><div class="line">        <span class="keyword">if</span>(num[j] &lt; nums[j<span class="number">-1</span>]) &#123;</div><div class="line">            swap(nums[j], nums[j<span class="number">-1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>插入排序所需的时间与输入的元素的初始顺序有关，最坏情况下需要N^2/2次比较和N^2/2次交换，最好需要N-1次比较和0次交换<br><a id="more"></a></p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>要将一个数组排序，可以递归地将它分成两半分别排序，然后在合并起来。{0-N} = merge( {0-N/2},  {N/2-N} );<br>merge(n) = { min( {0-n/2}, {n/2-n} ) }。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">nums, lo, hi</span>) </span>&#123;</div><div class="line">   <span class="keyword">let</span>  mid = (lo + hi ) / <span class="number">2</span>;</div><div class="line">    sort(nums, lo, mid);</div><div class="line">    sort(nums, mid+<span class="number">1</span>, hi);</div><div class="line">    merge(nums,lo, mid, hi);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">nums, low, mid, high</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> i = lo, j = mid +<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k = lo; k &lt;= high, k++) &#123;</div><div class="line">        aux[k] = nums[k];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k =lo; k&lt;=high;k++) &#123;</div><div class="line">        <span class="keyword">if</span>(i&gt;mid) a[k] = aux[j++];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(j &gt; hi) a[k] = aux[i++];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(less(aux[j], aux[k])) a[k] = aux[j++];</div><div class="line">        <span class="keyword">else</span> a[k] = aux[i++];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>时间复杂度NlgN,空间复杂度N,比初级算法较优</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>当两个子数组有序时，就完成了排序。{0-N} = {0-K} + {K-N};partition(n) = swap( n1&lt;k, k&lt;n2 ),k = nums[lo]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">nums, lo, hi</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> j = partition(nums,lo, hi);</div><div class="line">    sort(nums, lo, j<span class="number">-1</span>);</div><div class="line">    sort(nums, j+<span class="number">1</span>, hi);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">nums, lo ,hi</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> i = lo, j = hi, k = nums[lo];</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">        <span class="keyword">while</span>(a[++i] &lt; k) <span class="keyword">if</span>(i = hi) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">while</span>(a[++j] &gt; k) <span class="keyword">if</span>(j = lo) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(i&gt;j) <span class="keyword">break</span>;</div><div class="line">        swap(nums[i], nums[j]);</div><div class="line">    &#125;</div><div class="line">    swap(nums[lo], nums[j]);</div><div class="line">    <span class="keyword">return</span> j;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>时间复杂度NlgN,空间复杂度lgN</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;排序就是将一组对象按照某种逻辑重新排列的过程。&lt;/p&gt;
&lt;h2 id=&quot;初级排序算法&quot;&gt;&lt;a href=&quot;#初级排序算法&quot; class=&quot;headerlink&quot; title=&quot;初级排序算法&quot;&gt;&lt;/a&gt;初级排序算法&lt;/h2&gt;&lt;h3 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h3&gt;&lt;p&gt;不断重复找到最小的元素，移到相应位置。{0-N} = {0, 1, 2,..N}, {n} = swap( nums[n], min{ nums[n~nums.length] } )&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; nums = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i =&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt; nums.length; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; j = i; j &amp;lt; nums.length; j++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        minNum = min(minNum, nums[j]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    swap(minNum, nums[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有 N 次交换和N+(N-1)+..+2+1~N^2/2次比较&lt;/p&gt;
&lt;h3 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h3&gt;&lt;p&gt;每次将一个数插入有序数组的适当位置。{0-N} = {0, 1, 2,..N},{n} = { nums[0~n]}.swap( less(nums[n], nums[n-1]) )&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;nums.length; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; j = i; j &amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j--)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(num[j] &amp;lt; nums[j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            swap(nums[j], nums[j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;插入排序所需的时间与输入的元素的初始顺序有关，最坏情况下需要N^2/2次比较和N^2/2次交换，最好需要N-1次比较和0次交换&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://hqiwen.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组 排序" scheme="https://hqiwen.github.io/tags/%E6%95%B0%E7%BB%84-%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>web服务器框架原理</title>
    <link href="https://hqiwen.github.io/2019/03/10/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/"/>
    <id>https://hqiwen.github.io/2019/03/10/web服务器框架原理/</id>
    <published>2019-03-10T02:22:36.000Z</published>
    <updated>2019-03-10T02:32:53.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>通过一个数组收集中间件，然后通过算法让其依次执行，平常所写的业务代码被收集起来，交给框架去最优化运行</p><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> app = &#123;</div><div class="line">    stacks: [];</div><div class="line">&#125;;</div><div class="line"><span class="comment">//监听http请求</span></div><div class="line">app.listen = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> server = http.createServer(app.callback);</div><div class="line">    <span class="keyword">return</span> server.listen(...args);</div><div class="line">&#125;;</div><div class="line"><span class="built_in">module</span>.exports = app;</div></pre></td></tr></table></figure><h3 id="实例收集"><a href="#实例收集" class="headerlink" title="实例收集"></a>实例收集</h3><p>通过app.use收集要使用的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">app.use = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> fn === <span class="string">"function"</span>)&#123;</div><div class="line">        <span class="keyword">throw</span>(<span class="string">'middleware must be a function'</span>)</div><div class="line">    &#125;</div><div class="line">    app.stacks.push(fn);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="算法与运行时"><a href="#算法与运行时" class="headerlink" title="算法与运行时"></a>算法与运行时</h3><p>数组的链式调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">app.callback = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    dispatch(req, res, app.stacks);</div><div class="line">&#125;</div><div class="line"><span class="comment">//每当有请求传来，就调用中间件数组</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">req, res, stack</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> next = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            <span class="keyword">return</span> handleError(err, req, res, stack);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> middleware = stack.shift();</div><div class="line">        <span class="keyword">if</span> (middleware) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//next传递给下一个中间件，形成尾调用</span></div><div class="line">                middleware(req, res, next);</div><div class="line">            &#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">                next(err);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    next();</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>中间件是一个函数，function(req, res, next),<em>req</em>是IncomingMessage对象，<em>res</em>是ServerResponse对象,next函数调用下一个中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> query =  <span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> opts = merge(&#123;&#125;, options);</div><div class="line">    <span class="keyword">var</span> queryparse = qs.parse;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">"function"</span>) &#123;</div><div class="line">        queryparse = options;</div><div class="line">        opts = <span class="literal">undefined</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!req.query) &#123;</div><div class="line">            <span class="keyword">var</span> val = url.parse(req.url).query;</div><div class="line">            req.query = queryparse(val, opts);</div><div class="line">        &#125;</div><div class="line">        next();</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line">app.use(query());</div></pre></td></tr></table></figure><a id="more"></a><h3 id="req-和-res-对象的增强"><a href="#req-和-res-对象的增强" class="headerlink" title="req 和 res 对象的增强"></a>req 和 res 对象的增强</h3><p>node 本身的 http 模块不能很好地适应业务需求，需要对其改造</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> req = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line"><span class="comment">//req.headers, req.socket, req.method</span></div><div class="line"><span class="keyword">let</span> res = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line"><span class="comment">//res.sendFile, res.json, res.render, res.redirect</span></div><div class="line"></div><div class="line">app.request = req;</div><div class="line">app.response = res;</div></pre></td></tr></table></figure><h2 id="mvc模式"><a href="#mvc模式" class="headerlink" title="mvc模式"></a>mvc模式</h2><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// let tpl = 'hello &lt;%=username%&gt;.'  render(tpl, &#123;username: "jack"&#125;)</span></div><div class="line"> <span class="keyword">let</span> tpl = str.replace(<span class="regexp">/&lt;%=([\s\S]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;code&#125;</span>`</span>;</div><div class="line"> &#125;)</div><div class="line"></div><div class="line"> res.render = <span class="function"><span class="keyword">function</span>(<span class="params">viewName, data</span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;通过一个数组收集中间件，然后通过算法让其依次执行，平常所写的业务代码被收集起来，交给框架去最优化运行&lt;/p&gt;
&lt;h3 id=&quot;命名空间&quot;&gt;&lt;a href=&quot;#命名空间&quot; class=&quot;headerlink&quot; title=&quot;命名空间&quot;&gt;&lt;/a&gt;命名空间&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; app = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    stacks: [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//监听http请求&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;app.listen = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;...args&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; server = http.createServer(app.callback);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; server.listen(...args);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = app;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;实例收集&quot;&gt;&lt;a href=&quot;#实例收集&quot; class=&quot;headerlink&quot; title=&quot;实例收集&quot;&gt;&lt;/a&gt;实例收集&lt;/h3&gt;&lt;p&gt;通过app.use收集要使用的中间件&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;app.use = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fn&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; fn === &lt;span class=&quot;string&quot;&gt;&quot;function&quot;&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;middleware must be a function&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    app.stacks.push(fn);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;算法与运行时&quot;&gt;&lt;a href=&quot;#算法与运行时&quot; class=&quot;headerlink&quot; title=&quot;算法与运行时&quot;&gt;&lt;/a&gt;算法与运行时&lt;/h3&gt;&lt;p&gt;数组的链式调用&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;app.callback = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dispatch(req, res, app.stacks);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//每当有请求传来，就调用中间件数组&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dispatch&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res, stack&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; next = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; handleError(err, req, res, stack);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; middleware = stack.shift();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (middleware) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//next传递给下一个中间件，形成尾调用&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                middleware(req, res, next);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (err) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                next(err);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    next();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;中间件&quot;&gt;&lt;a href=&quot;#中间件&quot; class=&quot;headerlink&quot; title=&quot;中间件&quot;&gt;&lt;/a&gt;中间件&lt;/h3&gt;&lt;p&gt;中间件是一个函数，function(req, res, next),&lt;em&gt;req&lt;/em&gt;是IncomingMessage对象，&lt;em&gt;res&lt;/em&gt;是ServerResponse对象,next函数调用下一个中间件&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; query =  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;options&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; opts = merge(&amp;#123;&amp;#125;, options);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; queryparse = qs.parse;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; options === &lt;span class=&quot;string&quot;&gt;&quot;function&quot;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        queryparse = options;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        opts = &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res, next&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!req.query) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; val = url.parse(req.url).query;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            req.query = queryparse(val, opts);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        next();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;app.use(query());&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="https://hqiwen.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="web server express" scheme="https://hqiwen.github.io/tags/web-server-express/"/>
    
  </entry>
  
  <entry>
    <title>计算机系统构造第二期</title>
    <link href="https://hqiwen.github.io/2018/11/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%9E%84%E9%80%A0%E7%AC%AC%E4%BA%8C%E6%9C%9F/"/>
    <id>https://hqiwen.github.io/2018/11/16/计算机系统构造第二期/</id>
    <published>2018-11-16T11:04:41.000Z</published>
    <updated>2018-11-23T08:47:50.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块化、对象和状态"><a href="#模块化、对象和状态" class="headerlink" title="模块化、对象和状态"></a>模块化、对象和状态</h2><p>我们关于世界的常规观点之一，就是将它看作聚集在一起的许多独立对象，每个对象都有自己随着时间变化的状态。所谓一个对象有<strong>状态</strong>，也就是说<strong>它的行为受到它的历史的影响</strong>。</p><h3 id="赋值与局部状态"><a href="#赋值与局部状态" class="headerlink" title="赋值与局部状态"></a>赋值与局部状态</h3><p>假定开始账户里有100元钱，在不断使用withdraw的过程中可以得到以下响应序列：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">withdraw(<span class="number">25</span>) <span class="comment">// 75</span></div><div class="line">withdraw(<span class="number">25</span>) <span class="comment">// 50</span></div><div class="line">withdraw(<span class="number">60</span>) <span class="comment">//余额不足</span></div></pre></td></tr></table></figure><p>可以看到每次执行withdraw的结果不同，我们用一个变量balance去表示账户里的现金余额</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> balance = <span class="number">100</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params">amount</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(amount &gt; balance)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"余额不足"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        balance -= amount;</div><div class="line">        <span class="built_in">console</span>.log(balance);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">withdraw(<span class="number">50</span>);<span class="comment">// 50</span></div><div class="line">withdraw(<span class="number">20</span>);<span class="comment">// 30</span></div><div class="line">withdraw(<span class="number">20</span>);<span class="comment">// 10</span></div><div class="line">----------------------------------</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">new_withdraw</span>(<span class="params">amount</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> balance = <span class="number">100</span>;</div><div class="line">    <span class="keyword">if</span> (amount &gt; balance) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"余额不足"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        balance -= amount;</div><div class="line">        <span class="built_in">console</span>.log(balance);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> balance;</div><div class="line">&#125;;</div><div class="line">w1 = new_withdraw(<span class="number">50</span>);<span class="comment">// 50</span></div><div class="line">w2 = new_withdraw(<span class="number">20</span>);<span class="comment">// 80</span></div><div class="line">w3 = new_withdraw(<span class="number">20</span>);<span class="comment">// 80</span></div></pre></td></tr></table></figure><p>可以看到w1、w2、w3是各自独立的，互不影响，与所有状态都必须显式地操作和传递额外参数的方式相比，通过引进赋值和将状态隐藏在局部变量中的技术，我们能以一种更模块化的方式构造系统。<br><a id="more"></a></p><h3 id="按值传递和按引用传递"><a href="#按值传递和按引用传递" class="headerlink" title="按值传递和按引用传递"></a>按值传递和按引用传递</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> apple = &#123; <span class="attr">fruit</span>: <span class="string">"apple"</span> &#125;;</div><div class="line">    <span class="built_in">console</span>.log(apple.fruit);<span class="comment">//apple</span></div><div class="line">    <span class="keyword">let</span> banana = apple;</div><div class="line">    banana.fruit = <span class="string">"banana"</span>;</div><div class="line">    <span class="built_in">console</span>.log(apple.fruit);<span class="comment">//banana</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>变量是按引用传递的，apple.fruit的值会被修改，banana 复制了 apple的指向内存，两者共用一个内存，所以apple.fruit的值会被修改，因为变量保存的是指针，所以变量的值有暂时记忆。</p><h3 id="用变动的数据做模拟"><a href="#用变动的数据做模拟" class="headerlink" title="用变动的数据做模拟"></a>用变动的数据做模拟</h3><p>比如保存上一次的看的书的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> book = &#123;</div><div class="line">    name: name,</div><div class="line">    chapter: number,</div><div class="line">    page: number,</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params">name, chapter, page</span>) </span>&#123;</div><div class="line">    book.name = name,</div><div class="line">    book.chapter = chapter,</div><div class="line">    book.page = page,</div><div class="line">&#125;</div><div class="line">store(<span class="string">"CSS世界"</span>, <span class="number">1</span>, <span class="number">13</span>);</div></pre></td></tr></table></figure><h2 id="并发-本质上是时间问题"><a href="#并发-本质上是时间问题" class="headerlink" title="并发:本质上是时间问题"></a>并发:本质上是时间问题</h2><p>现实世界的对象并不是一次一个地顺序变化，与此相反，它们总是并发地活动，所有东西一起活动。所以用并发执行的计算进程模拟各种系统是正常的。从表面上看，时间似乎是非常简单的东西。它也就是强加在各种事件上的一个顺序。</p><h3 id="共享变量的处理"><a href="#共享变量的处理" class="headerlink" title="共享变量的处理"></a>共享变量的处理</h3><p>如果小明和小红要借阅同一本书，登录图书系统，则谁会借到这本书？</p><ol><li>如果小明先申请，这时小红也提出申请，服务器先写入小明的名字，当读取时被小红的写入改变，最后返回小红的名字，反而小红借到了这本书。</li><li>如果小明先申请，这时小红也提出申请，由于小明网络延时，服务器先返回小红的请求，反而小红借到了这本书。</li></ol><p>如何让小明借到这本书？</p><blockquote><p>方案一： 同时只让一个人提出申请，当一个人处于申请这本书状态时，不让其他人提出申请，严格限制请求，先到先得<br>方案二： 使用互斥锁，先获取先到的请求，忽略其他请求，竞争性互斥，具有不确定</p></blockquote><p>在并发系统的设计中，需要去<strong>控制不同进程访问共享变量的事件发生顺序</strong>，可以通过限定修改任意共享变量的两个操作都不允许同时发生，但是这样太低效和保守了；另一种保证并发系统产出的结果与各个进程按照某种方式顺序运行产生的结果完全一样，但是<strong>顺序不确定</strong>,常用互斥锁。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模块化、对象和状态&quot;&gt;&lt;a href=&quot;#模块化、对象和状态&quot; class=&quot;headerlink&quot; title=&quot;模块化、对象和状态&quot;&gt;&lt;/a&gt;模块化、对象和状态&lt;/h2&gt;&lt;p&gt;我们关于世界的常规观点之一，就是将它看作聚集在一起的许多独立对象，每个对象都有自己随着时间变化的状态。所谓一个对象有&lt;strong&gt;状态&lt;/strong&gt;，也就是说&lt;strong&gt;它的行为受到它的历史的影响&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;赋值与局部状态&quot;&gt;&lt;a href=&quot;#赋值与局部状态&quot; class=&quot;headerlink&quot; title=&quot;赋值与局部状态&quot;&gt;&lt;/a&gt;赋值与局部状态&lt;/h3&gt;&lt;p&gt;假定开始账户里有100元钱，在不断使用withdraw的过程中可以得到以下响应序列：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;withdraw(&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 75&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;withdraw(&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 50&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;withdraw(&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//余额不足&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到每次执行withdraw的结果不同，我们用一个变量balance去表示账户里的现金余额&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; balance = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;withdraw&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;amount&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(amount &amp;gt; balance)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;余额不足&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        balance -= amount;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(balance);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;withdraw(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 50&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;withdraw(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 30&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;withdraw(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 10&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;----------------------------------&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;new_withdraw&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;amount&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; balance = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (amount &amp;gt; balance) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;余额不足&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        balance -= amount;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(balance);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; balance;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;w1 = new_withdraw(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 50&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;w2 = new_withdraw(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 80&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;w3 = new_withdraw(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 80&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到w1、w2、w3是各自独立的，互不影响，与所有状态都必须显式地操作和传递额外参数的方式相比，通过引进赋值和将状态隐藏在局部变量中的技术，我们能以一种更模块化的方式构造系统。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://hqiwen.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="计算机基础" scheme="https://hqiwen.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>计算机系统构造浅解第一期</title>
    <link href="https://hqiwen.github.io/2018/11/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%9E%84%E9%80%A0/"/>
    <id>https://hqiwen.github.io/2018/11/09/计算机系统构造/</id>
    <published>2018-11-09T14:06:32.000Z</published>
    <updated>2018-11-11T11:31:48.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序设计的基本元素"><a href="#程序设计的基本元素" class="headerlink" title="程序设计的基本元素"></a>程序设计的基本元素</h2><ol><li><strong>基本表达式</strong>，用于表示语言关心的最简单个体。</li><li><strong>组合的方法</strong>，通过它们可以从简单的东西出发构造出符合的元素。</li><li><strong>抽象的方法</strong>，通过它们可以为复合对象命名，并将它们当做单元去操作。</li></ol><p>在程序设计中，我们需要处理两类要素：过程和数据。数据是一种我们希望去操作的“东西”，而过程就是有关操作这些数据的规则的描述。</p><h2 id="抽象过程"><a href="#抽象过程" class="headerlink" title="抽象过程"></a>抽象过程</h2><h3 id="数据参数化"><a href="#数据参数化" class="headerlink" title="数据参数化"></a>数据参数化</h3><p>如果我们要计算2的平方，你可能会这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result = <span class="number">2</span>*<span class="number">2</span></div></pre></td></tr></table></figure><p>现在我们要表达一个”平方”的概念，则有如下公式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x * x;</div><div class="line">&#125;</div><div class="line">result = square(<span class="number">2</span>);</div></pre></td></tr></table></figure><p>我们提出了一个复合过程<strong>平方</strong>，从只能计算2的平方到任意数的平方，差别在于给了过程一个参数，把<strong>数据参数化</strong>，可以提高抽象性和适用性，下面用平方去定义<strong>平方和</strong>的概念；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">squareSum</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> square(x) + square(y);</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><p>实例：比如在canvas上绘制多个矩形：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> array = [</div><div class="line">    [<span class="number">1</span>, <span class="number">0</span>],</div><div class="line">    [<span class="number">2</span>, <span class="number">0</span>],</div><div class="line">    [<span class="number">3</span>, <span class="number">0</span>]</div><div class="line">]</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRectangle</span>(<span class="params">rectangleX, rectangleY, width, height</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> rectangle = <span class="keyword">new</span> Graphics();</div><div class="line">    rectangle.lineStyle(<span class="number">2</span>, <span class="number">0xff3300</span>, <span class="number">1</span>);</div><div class="line">    rectangle.drawRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line">    rectangle.endFill();</div><div class="line">    rectangle.x = rectangleX;</div><div class="line">    rectangle.y = rectangleY;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRectangleFormArray</span>(<span class="params">array, width, height</span>) </span>&#123;</div><div class="line">    arr.forEach(<span class="function"><span class="params">arr</span> =&gt;</span> &#123;</div><div class="line">        createRectangle(arr[<span class="number">0</span>], arr[<span class="number">1</span>], width, height);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">createRectangleFormArray(array, <span class="number">1</span>, <span class="number">1</span>);</div></pre></td></tr></table></figure><h3 id="函数参数化"><a href="#函数参数化" class="headerlink" title="函数参数化"></a>函数参数化</h3><p>由上面可知，函数是对过程的简化，现在我们尝试把一个函数作为一个参数，那么会得到一个<strong>高阶函数</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">message</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"hello"</span> + message)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">message</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Hi"</span> + message)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">saySomething</span>(<span class="params"> fn, message</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> fn(message);</div><div class="line">&#125;</div><div class="line">saySomething(sayHello, world);</div><div class="line">saySomething(sayHi, world);</div></pre></td></tr></table></figure><p>实例：高阶组件的应用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span>  [count] = useState(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        &lt;div&gt;</div><div class="line">            &lt;p&gt;you click &#123; count &#125; times&lt;<span class="regexp">/p&gt;</span></div><div class="line"><span class="regexp">        &lt;/</span>div&gt;</div><div class="line">    )</div><div class="line">&#125;</div><div class="line"><span class="comment">//传入一个组件</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addNewProp</span>(<span class="params">component, newProp, initValue</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">newComponent</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">const</span> [newProp, setNewProp] = useState(initValue);</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="keyword">const</span> &#123; ...others &#125; = component.props;</div><div class="line">            &lt;component newProp = &#123; newProp &#125; &#123; ...others &#125; &gt;<span class="xml"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">addNewProp(count, time, <span class="string">"2018"</span>)</div></pre></td></tr></table></figure><h2 id="抽象数据"><a href="#抽象数据" class="headerlink" title="抽象数据"></a>抽象数据</h2><p>现在我们要完成有理数的计算，就要<strong>有理数</strong>这个概念，下面构造有理数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">gcd</span>(<span class="params">num1, num2</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> num2 === <span class="number">0</span> ? num1 : gcd(num2, num1 % num2);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeRat</span>(<span class="params">numer, denom</span>) </span>&#123;</div><div class="line">    <span class="comment">//化约，numer 分子，denom 分母</span></div><div class="line">    <span class="keyword">let</span> gcd_number = gcd(numer, denom);</div><div class="line">    numer = numer / gcd_number;</div><div class="line">    denom = denom / gcd_number;</div><div class="line">    <span class="keyword">this</span>.numer = numer;</div><div class="line">    <span class="keyword">this</span>.denom = denom;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addRat</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> numer = x.numer * y.denom + y.numer * x.denom;</div><div class="line">    <span class="keyword">let</span> denom = x.denom * y.denom;</div><div class="line">    <span class="keyword">return</span> makeRat(numer, denom);</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> x = <span class="keyword">new</span> makeRat(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line"><span class="keyword">let</span> y = <span class="keyword">new</span> makeRat(<span class="number">1</span>, <span class="number">2</span>);</div></pre></td></tr></table></figure><p>转换成class写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rat</span></span>&#123;</div><div class="line">    construct(numer, denom) &#123;</div><div class="line">        <span class="keyword">let</span> gcd_number = gcd(numer, denom);</div><div class="line">        numer = numer / gcd_number;</div><div class="line">        denom = denom / gcd_number;</div><div class="line">        <span class="keyword">this</span>.numer = numer;</div><div class="line">        <span class="keyword">this</span>.denom = denom;</div><div class="line">    &#125;</div><div class="line">    addRat(x, y) &#123;</div><div class="line">        <span class="keyword">let</span> numer = x.numer * y.denom + y.numer * x.denom;</div><div class="line">        <span class="keyword">let</span> denom = x.denom * y.denom;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Rat(numer, denom);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在我们可以轻松地完成对有理数的操作，从对整数的操作中释放出来，通过<strong>构造有理数</strong>这个概念，为整数提供了一份抽象，我们得以<strong>在有理数之上操作整数</strong>。</p><p>实例：react Element的构造,封装真实DOM的操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> ReactElement = <span class="function"><span class="keyword">function</span>(<span class="params">type, key, ref, props</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> element = &#123;</div><div class="line">    type: type,</div><div class="line">    key: key,</div><div class="line">    ref: ref,</div><div class="line">    props: props,</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> element;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, config, children</span>) </span>&#123;</div><div class="line">  <span class="comment">//some code</span></div><div class="line">  <span class="keyword">return</span> ReactElement(</div><div class="line">    type,</div><div class="line">    key,</div><div class="line">    ref,</div><div class="line">    props,</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> component = <span class="function"><span class="params">()</span> =&gt;</span> (</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;p&gt;Are you sure?<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">        &lt;Button color=<span class="string">"blue"</span>&gt;Cancel&lt;<span class="regexp">/Button&gt;</span></div><div class="line"><span class="regexp">    &lt;/</span>div&gt;</div><div class="line">)</div><div class="line"><span class="keyword">const</span> component = <span class="function"><span class="keyword">function</span> <span class="title">buildComponent</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> React.createElement(</div><div class="line">        <span class="string">"div"</span>,</div><div class="line">        <span class="literal">null</span>,</div><div class="line">        React.createElement(</div><div class="line">            <span class="string">"p"</span>,</div><div class="line">            <span class="literal">null</span>,</div><div class="line">            <span class="string">'Are you sure?'</span></div><div class="line">        ),</div><div class="line">        React.createElement(</div><div class="line">            Button,</div><div class="line">            &#123; <span class="attr">color</span>: <span class="string">"blue"</span> &#125;,</div><div class="line">            <span class="string">"Cancel"</span></div><div class="line">        )</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;程序设计的基本元素&quot;&gt;&lt;a href=&quot;#程序设计的基本元素&quot; class=&quot;headerlink&quot; title=&quot;程序设计的基本元素&quot;&gt;&lt;/a&gt;程序设计的基本元素&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;基本表达式&lt;/strong&gt;，用于表示语言关心的最简单个体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组合的方法&lt;/strong&gt;，通过它们可以从简单的东西出发构造出符合的元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抽象的方法&lt;/strong&gt;，通过它们可以为复合对象命名，并将它们当做单元去操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在程序设计中，我们需要处理两类要素：过程和数据。数据是一种我们希望去操作的“东西”，而过程就是有关操作这些数据的规则的描述。&lt;/p&gt;
&lt;h2 id=&quot;抽象过程&quot;&gt;&lt;a href=&quot;#抽象过程&quot; class=&quot;headerlink&quot; title=&quot;抽象过程&quot;&gt;&lt;/a&gt;抽象过程&lt;/h2&gt;&lt;h3 id=&quot;数据参数化&quot;&gt;&lt;a href=&quot;#数据参数化&quot; class=&quot;headerlink&quot; title=&quot;数据参数化&quot;&gt;&lt;/a&gt;数据参数化&lt;/h3&gt;&lt;p&gt;如果我们要计算2的平方，你可能会这样写：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;result = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们要表达一个”平方”的概念，则有如下公式：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x * x;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;result = square(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们提出了一个复合过程&lt;strong&gt;平方&lt;/strong&gt;，从只能计算2的平方到任意数的平方，差别在于给了过程一个参数，把&lt;strong&gt;数据参数化&lt;/strong&gt;，可以提高抽象性和适用性，下面用平方去定义&lt;strong&gt;平方和&lt;/strong&gt;的概念；&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;squareSum&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; square(x) + square(y);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="https://hqiwen.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="计算机基础" scheme="https://hqiwen.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>精读前后端渲染之争</title>
    <link href="https://hqiwen.github.io/2018/11/09/%E5%89%8D%E5%90%8E%E7%AB%AF%E6%B8%B2%E6%9F%93%E5%AF%B9%E6%AF%94/"/>
    <id>https://hqiwen.github.io/2018/11/09/前后端渲染对比/</id>
    <published>2018-11-09T13:00:32.244Z</published>
    <updated>2018-11-09T13:00:32.244Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转载自<a href="https://medium.freecodecamp.com/heres-why-client-side-rendering-won-46a349fadb52" target="_blank" rel="external">Here’s why Client-side Rendering Won</a>,同时<a href="https://github.com/camsong/blog/issues/8" target="_blank" rel="external">中文翻译地址</a>，如果想获得更好的阅读体验，请阅读原文</p></blockquote><p>1 引言</p><p>我为什么要选这篇文章呢？</p><img src="/2018/11/09/前后端渲染对比/ca1b6618-2209-11e7-99ae-c2a75ad3dabb.png" alt="ca1b6618-2209-11e7-99ae-c2a75ad3dabb.png" title=""><p>十年前，几乎所有网站都使用 ASP、Java、PHP 这类做后端渲染，但后来随着 jQuery、Angular、React、Vue 等 JS 框架的崛起，开始转向了前端渲染。从 2014 年起又开始流行了同构渲染，号称是未来，集成了前后端渲染的优点，但转眼间三年过去了，很多当时壮心满满的框架（rendr、Lazo）从先驱变成了先烈。同构到底是不是未来？自己的项目该如何选型？我想不应该只停留在追求热门和拘泥于固定模式上，忽略了前后端渲染之“争”的“核心点”，关注如何提升“用户体验”。</p><p>原文分析了前端渲染的优势，并没有进行深入探讨。我想以它为切入口来深入探讨一下。</p><p>明确三个概念：「后端渲染」指传统的 ASP、Java 或 PHP 的渲染机制；「前端渲染」指使用 JS 来渲染页面大部分内容，代表是现在流行的 SPA 单页面应用；「同构渲染」指前后端共用 JS，首次渲染时使用 Node.js 来直出 HTML。一般来说同构渲染是介于前后端中的共有部分。<br><a id="more"></a><br>2 内容概要</p><p>前端渲染的优势</p><ul><li>局部刷新。无需每次都进行完整页面请求</li><li>懒加载。如在页面初始时只加载可视区域内的数据，滚动后rp加载其它数据，可以通过 react-lazyload 实现</li><li>富交互。使用 JS 实现各种酷炫效果</li><li>节约服务器成本。省电省钱，JS 支持 CDN 部署，且部署极其简单，只需要服务器支持静态文件即可</li><li>天生的关注分离设计。服务器来访问数据库提供接口，JS 只关注数据获取和展现</li><li>JS 一次学习，到处使用。可以用来开发 Web、Serve、Mobile、Desktop 类型的应用</li></ul><img src="/2018/11/09/前后端渲染对比/68747470733a2f2f706963312e7a68696d672e636f6d2f76322d37623034616335636165363466613737343061316466623162663862303963345f622e706e67.png" alt="68747470733a2f2f706963312e7a68696d672e636f6d2f76322d37623034616335636165363466613737343061316466623162663862303963345f622e706e67.png" title=""><p>后端渲染的优势</p><ul><li>服务端渲染不需要先下载一堆 js 和 css 后才能看到页面（首屏性能）</li><li>SEO</li><li>服务端渲染不用关心浏览器兼容性问题（随意浏览器发展，这个优点逐渐消失）</li><li>对于电量不给力的手机或平板，减少在客户端的电量消耗很重要</li><li>以上服务端优势其实只有首屏性能和 SEO 两点比较突出。但现在这两点也慢慢变得微不足道了。React 这类支持同构的框架已经能解决这个问题，尤其是 Next.js 让同构开发变得非常容易。还有静态站点的渲染，但这类应用本身复杂度低，很多前端框架已经能完全囊括。</li></ul><p>3 精读</p><p>前端渲染遇到的问题</p><p>  前端渲染主要面临的问题有两个 SEO、首屏性能。<br>  SEO 很好理解。由于传统的搜索引擎只会从 HTML 中抓取数据，导致前端渲染的页面无法被抓取。前端渲染常使用的 SPA 会把所有 JS 整体打包，无法忽视的问题就是文件太大，导致渲染前等待很长时间。特别是网速差的时候，让用户等待白屏结束并非一个很好的体验。</p><p>同构的优点</p><p>同构恰恰就是为了解决前端渲染遇到的问题才产生的，至 2014 年底伴随着 React 的崛起而被认为是前端框架应具备的一大杀器，以至于当时很多人为了用此特性而放弃 Angular 1 而转向 React。然而近3年过去了，很多产品逐渐从全栈同构的理想化逐渐转到首屏或部分同构。让我们再一次思考同构的优点真是优点吗？</p><ul><li><p>有助于 SEO</p><p>首先确定你的应用是否都要做 SEO，如果是一个后台应用，那么只要首页做一些静态内容宣导就可以了。如果是内容型的网站，那么可以考虑专门做一些页面给搜索引擎</p><p>时到今日，谷歌已经能够可以在爬虫中执行 JS 像浏览器一样理解网页内容，只需要往常一样使用 JS 和 CSS 即可。并且尽量使用新规范，使用 pushstate 来替代以前的 hashstate。不同的搜索引擎的爬虫还不一样，要做一些配置的工作，而且可能要经常关注数据，有波动那么可能就需要更新。第二是该做 sitemap 的还得做。相信未来即使是纯前端渲染的页面，爬虫也能很好的解析。</p></li><li><p>共用前端代码，节省开发时间</p><p>其实同构并没有节省前端的开发量，只是把一部分前端代码拿到服务端执行。而且为了同构还要处处兼容 Node.js 不同的执行环境。有额外成本，这也是后面会具体谈到的。</p></li><li><p>提高首屏性能</p><p>由于 SPA 打包生成的 JS 往往都比较大，会导致页面加载后花费很长的时间来解析，也就造成了白屏问题。服务端渲染可以预先使到数据并渲染成最终 HTML 直接展示，理想情况下能避免白屏问题。在我参考过的一些产品中，很多页面需要获取十几个接口的数据，单是数据获取的时候都会花费数秒钟，这样全部使用同构反而会变慢。</p></li></ul><p>同构并没有想像中那么美</p><ul><li><p>性能</p><p>把原来放在几百万浏览器端的工作拿过来给你几台服务器做，这还是花挺多计算力的。尤其是涉及到图表类需要大量计算的场景。这方面调优，可以参考 walmart的调优策略。</p><p>个性化的缓存是遇到的另外一个问题。可以把每个用户个性化信息缓存到浏览器，这是一个天生的分布式缓存系统。我们有个数据类应用通过在浏览器合理设置缓存，双十一当天节省了 70% 的请求量。试想如果这些缓存全部放到服务器存储，需要的存储空间和计算都是很非常大。</p></li><li><p>不容忽视的服务器端和浏览器环境差异</p><p>前端代码在编写时并没有过多的考虑后端渲染的情景，因此各种 BOM 对象和 DOM API 都是拿来即用。这从客观层面也增加了同构渲染的难度。我们主要遇到了以下几个问题：<br>document 等对象找不到的问题</p></li><li><p>DOM 计算报错的问题</p></li><li><p>前端渲染和服务端渲染内容不一致的问题</p><p>由于前端代码使用的  window  在 node 环境是不存在的，所以要 mock window，其中最重要的是 cookie，userAgent，location。但是由于每个用户访问时是不一样的  window ，那么就意味着你得每次都更新  window 。</p><p>而服务端由于 js require 的 cache 机制，造成前端代码除了具体渲染部分都只会加载一遍。这时候  window  就得不到更新了。所以要引入一个合适的更新机制，比如把读取改成每次用的时候再读取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export const isSsr = () =&gt; (</div><div class="line">  !(typeof window !== &apos;undefined&apos; &amp;&amp; window.document &amp;&amp; window.document.createElement &amp;&amp; window.setTimeout)</div><div class="line">  );</div></pre></td></tr></table></figure><p>原因是很多 DOM 计算在 SSR 的时候是无法进行的，涉及到 DOM 计算的的内容不可能做到 SSR 和 CSR 完全一致，这种不一致可能会带来页面的闪动。</p></li><li><p>内存溢出</p><p>前端代码由于浏览器环境刷新一遍内存重置的天然优势，对内存溢出的风险并没有考虑充分。</p><p>比如在 React 的  componentWillMount  里做绑定事件就会发生内存溢出，因为 React 的设计是后端渲染只会运行  componentDidMount  之前的操作，而不会运行  componentWillUnmount方法（一般解绑事件在这里）。</p></li><li><p>异步操作</p><p>前端可以做非常复杂的请求合并和延迟处理，但为了同构，所有这些请求都在预先拿到结果才会渲染。而往往这些请求是有很多依赖条件的，很难调和。纯 React 的方式会把这些数据以埋点的方式打到页面上，前端不再发请求，但仍然再渲染一遍来比对数据。造成的结果是流程复杂，大规模使用成本高。幸运的是 Next.js 解决了这一些，后面会谈到。</p></li></ul><p>总的来说，同构渲染实施难度大，不够优雅，无论在前端还是服务端，都需要额外改造。</p><hr><p>首屏优化</p><p>再回到前端渲染遇到首屏渲染问题，除了同构就没有其它解法了吗？总结以下可以通过以下三步解决</p><ul><li><p>分拆打包</p><p>现在流行的路由库如 react-router 对分拆打包都有很好的支持。可以按照页面对包进行分拆，并在页面切换时加上一些 loading 和 transition 效果。</p></li><li><p>交互优化</p><p>首次渲染的问题可以用更好的交互来解决，先看下 linkedin 的渲染</p><img src="/2018/11/09/前后端渲染对比/68747470733a2f2f696d672e616c6963646e2e636f6d2f7466732f5442314a6a6b5151705858585858536158585858585858585858582d323535342d313430302e706e67.png" alt="68747470733a2f2f696d672e616c6963646e2e636f6d2f7466732f5442314a6a6b5151705858585858536158585858585858585858582d323535342d313430302e706e67.png" title=""><img src="/2018/11/09/前后端渲染对比/68747470733a2f2f696d672e616c6963646e2e636f6d2f7466732f54423169614d4d51705858585858766158585858585858585858582d323535342d313335342e706e67.png" alt="68747470733a2f2f696d672e616c6963646e2e636f6d2f7466732f54423169614d4d51705858585858766158585858585858585858582d323535342d313335342e706e67.png" title=""><p>有什么感受，非常自然，打开渲染并没有白屏，有两段加载动画，第一段像是加载资源，第二段是一个加载占位器，过去我们会用 loading 效果，但过渡性不好。近年流行 Skeleton Screen 效果。其实就是在白屏无法避免的时候，为了解决等待加载过程中白屏或者界面闪烁造成的割裂感带来的解决方案。</p></li><li><p>部分同构</p><p>部分同构可以降低成功同时利用同构的优点，如把核心的部分如菜单通过同构的方式优先渲染出来。我们现在的做法就是使用同构把菜单和页面骨架渲染出来。给用户提示信息，减少无端的等待时间。</p></li></ul><p>相信有了以上三步之后，首屏问题已经能有很大改观。相对来说体验提升和同构不分伯仲，而且相对来说对原来架构破坏性小，入侵性小。是我比较推崇的方案。</p><p>3 总结</p><p>我们赞成客户端渲染是未来的主要方向，服务端则会专注于在数据和业务处理上的优势。但由于日趋复杂的软硬件环境和用户体验更高的追求，也不能只拘泥于完全的客户端渲染。同构渲染看似美好，但以目前的发展程度来看，在大型项目中还不具有足够的应用价值，但不妨碍部分使用来优化首屏性能。做同构之前 ，一定要考虑到浏览器和服务器的环境差异，站在更高层面考虑。</p><p>附：Next.js 体验</p><p><a href="https://github.com/zeit/next.js/" target="_blank" rel="external">Next.js</a> 是时下非常流行的基于 React 的同构开发框架。作者之一就是大名鼎鼎的 Socket.io 的作者 Guillermo Rauch。它有以下几个亮点特别吸引我：</p><ul><li>巧妙地用标准化的解决了请求的问题。同构和页面开发类似，异步是个大难题，异步中难点又在接口请求。Next.js 给组件新增了 getInitialProps 方法来专门处理初始化请求，再也不用手动往页面上塞 DATA 和调用 ReactDOMServer.renderToString</li><li>使用 styled-jsx 解决了 css-in-js 的问题。这种方案虽然不像 styled-component 那样强大，但足够简单，可以说是最小的成本解决了问题</li><li>Fast by default。页面默认拆分文件方式打包，支持Prefetch页面预加载</li><li>全家桶式的的解决方案。简洁清晰的目录结构，这一点 Redux 等框架真应该学一学。不过全家桶的方案比较适合全新项目使用，旧项目使用要评估好成本</li></ul><p>讨论地址是：<a href="https://github.com/camsong/blog/issues/8" target="_blank" rel="external">前后端渲染之争 · Issue #5 · dt-fe/weekly</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文转载自&lt;a href=&quot;https://medium.freecodecamp.com/heres-why-client-side-rendering-won-46a349fadb52&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Here’s why Client-side Rendering Won&lt;/a&gt;,同时&lt;a href=&quot;https://github.com/camsong/blog/issues/8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文翻译地址&lt;/a&gt;，如果想获得更好的阅读体验，请阅读原文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1 引言&lt;/p&gt;
&lt;p&gt;我为什么要选这篇文章呢？&lt;/p&gt;
&lt;img src=&quot;/2018/11/09/前后端渲染对比/ca1b6618-2209-11e7-99ae-c2a75ad3dabb.png&quot; alt=&quot;ca1b6618-2209-11e7-99ae-c2a75ad3dabb.png&quot; title=&quot;&quot;&gt;
&lt;p&gt;十年前，几乎所有网站都使用 ASP、Java、PHP 这类做后端渲染，但后来随着 jQuery、Angular、React、Vue 等 JS 框架的崛起，开始转向了前端渲染。从 2014 年起又开始流行了同构渲染，号称是未来，集成了前后端渲染的优点，但转眼间三年过去了，很多当时壮心满满的框架（rendr、Lazo）从先驱变成了先烈。同构到底是不是未来？自己的项目该如何选型？我想不应该只停留在追求热门和拘泥于固定模式上，忽略了前后端渲染之“争”的“核心点”，关注如何提升“用户体验”。&lt;/p&gt;
&lt;p&gt;原文分析了前端渲染的优势，并没有进行深入探讨。我想以它为切入口来深入探讨一下。&lt;/p&gt;
&lt;p&gt;明确三个概念：「后端渲染」指传统的 ASP、Java 或 PHP 的渲染机制；「前端渲染」指使用 JS 来渲染页面大部分内容，代表是现在流行的 SPA 单页面应用；「同构渲染」指前后端共用 JS，首次渲染时使用 Node.js 来直出 HTML。一般来说同构渲染是介于前后端中的共有部分。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://hqiwen.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端渲染 后端渲染" scheme="https://hqiwen.github.io/tags/%E5%89%8D%E7%AB%AF%E6%B8%B2%E6%9F%93-%E5%90%8E%E7%AB%AF%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>使用G2重构日历</title>
    <link href="https://hqiwen.github.io/2018/11/09/%E4%BD%BF%E7%94%A8G2%E9%87%8D%E6%9E%84%E6%97%A5%E5%8E%86/"/>
    <id>https://hqiwen.github.io/2018/11/09/使用G2重构日历/</id>
    <published>2018-11-09T12:46:33.000Z</published>
    <updated>2018-11-09T13:03:58.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="G2是什么"><a href="#G2是什么" class="headerlink" title="G2是什么"></a>G2是什么</h2><blockquote><p><a href="https://antv.alipay.com/zh-cn/g2/3.x/tutorial/index.html" target="_blank" rel="external">G2</a>是一套基于可视化编码的图形语法，以数据驱动，具有高度的易用性和扩展性，用户无需关注各种繁琐的实现细节，一条语句即可构建出各种各样的可交互的统计图表。</p></blockquote><p>简单来说G2就是一个可视化JavaScript工具库，把传进去的数据用图表表现出来，但是不同于其他图形库，G2是基于图形语法工作的</p><h2 id="图形语法"><a href="#图形语法" class="headerlink" title="图形语法"></a>图形语法</h2><p>图形语法描述了我们从数据到图表的映射</p><img src="/2018/11/09/使用G2重构日历/dataToGraph.png" alt="从数据到图形的过程" title="从数据到图形的过程"><ol><li>从数据创建变量 data -&gt; variables[set]</li><li>对变量集进行运算,相对比与集合的运算,找到感兴趣的研究变量(cross, blend, nest)</li><li>对要研究的变量进行归一化，定义变量的性质(cat, time)</li><li>对复杂的变量进行统计,并不是所有的变量都要进行统计</li><li>创建几何图形 variable -&gt; graph</li><li>将建立的图形放到坐标系</li><li>对数据进行美学优化(color, point, label)</li><li>得到相应图形<a id="more"></a>下面给一个简单的示例：</li></ol><img src="/2018/11/09/使用G2重构日历/pieChart.png" alt="饼图" title="饼图"><h2 id="重构的简单说明"><a href="#重构的简单说明" class="headerlink" title="重构的简单说明"></a>重构的简单说明</h2><p>数据还是来源于<strong>data.js</strong>，计算方法大致相同，只不过返回的数据有所不同，日历作为一个二维的图表，返回如下数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ret.push(&#123;</div><div class="line">    weekDay: weekDay,</div><div class="line">    weekIndex: weekIndex,</div><div class="line">    date: showDate,</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>横坐标是weekDay，纵坐标是weekIndex，值是date，则有如下图形语法公式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">chart</div><div class="line">    .point()</div><div class="line">    .shape(<span class="string">"square"</span>)</div><div class="line">    .position(<span class="string">"weekDay*weekIndex"</span>)</div><div class="line">    .color(<span class="string">"date"</span>)</div></pre></td></tr></table></figure><p>添加两个辅助元素对事件的监听，用ID进行区分，来切换上下月：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">chart.on(<span class="string">"guide-text:click"</span>, ev =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (ev.appendInfo.id == <span class="string">"prevMonth"</span>) &#123;</div><div class="line">        <span class="comment">// some code</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ev.appendInfo.id == <span class="string">"nextMonth"</span>) &#123;</div><div class="line">        <span class="comment">// some code</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><a href="https://github.com/hqiwen/datepicker" target="_blank" rel="external">项目地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;G2是什么&quot;&gt;&lt;a href=&quot;#G2是什么&quot; class=&quot;headerlink&quot; title=&quot;G2是什么&quot;&gt;&lt;/a&gt;G2是什么&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://antv.alipay.com/zh-cn/g2/3.x/tutorial/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;G2&lt;/a&gt;是一套基于可视化编码的图形语法，以数据驱动，具有高度的易用性和扩展性，用户无需关注各种繁琐的实现细节，一条语句即可构建出各种各样的可交互的统计图表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来说G2就是一个可视化JavaScript工具库，把传进去的数据用图表表现出来，但是不同于其他图形库，G2是基于图形语法工作的&lt;/p&gt;
&lt;h2 id=&quot;图形语法&quot;&gt;&lt;a href=&quot;#图形语法&quot; class=&quot;headerlink&quot; title=&quot;图形语法&quot;&gt;&lt;/a&gt;图形语法&lt;/h2&gt;&lt;p&gt;图形语法描述了我们从数据到图表的映射&lt;/p&gt;
&lt;img src=&quot;/2018/11/09/使用G2重构日历/dataToGraph.png&quot; alt=&quot;从数据到图形的过程&quot; title=&quot;从数据到图形的过程&quot;&gt;
&lt;ol&gt;
&lt;li&gt;从数据创建变量 data -&amp;gt; variables[set]&lt;/li&gt;
&lt;li&gt;对变量集进行运算,相对比与集合的运算,找到感兴趣的研究变量(cross, blend, nest)&lt;/li&gt;
&lt;li&gt;对要研究的变量进行归一化，定义变量的性质(cat, time)&lt;/li&gt;
&lt;li&gt;对复杂的变量进行统计,并不是所有的变量都要进行统计&lt;/li&gt;
&lt;li&gt;创建几何图形 variable -&amp;gt; graph&lt;/li&gt;
&lt;li&gt;将建立的图形放到坐标系&lt;/li&gt;
&lt;li&gt;对数据进行美学优化(color, point, label)&lt;/li&gt;
&lt;li&gt;得到相应图形
    
    </summary>
    
      <category term="编程" scheme="https://hqiwen.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="可视化" scheme="https://hqiwen.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>一个简易的打包器</title>
    <link href="https://hqiwen.github.io/2018/10/23/%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84%E6%89%93%E5%8C%85%E5%99%A8/"/>
    <id>https://hqiwen.github.io/2018/10/23/一个简易的打包器/</id>
    <published>2018-10-23T03:20:33.000Z</published>
    <updated>2018-10-23T03:33:36.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="依赖解析"><a href="#依赖解析" class="headerlink" title="依赖解析"></a>依赖解析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> detective = <span class="built_in">require</span>(<span class="string">"detective"</span>);</div><div class="line"><span class="keyword">const</span> requires = detective(source);</div></pre></td></tr></table></figure><p>深度遍历寻找依赖，返回一个依赖数组</p><h2 id="源码比较简单，主要由三个函数构成"><a href="#源码比较简单，主要由三个函数构成" class="headerlink" title="源码比较简单，主要由三个函数构成"></a>源码比较简单，主要由三个函数构成</h2><h3 id="createModuleObject"><a href="#createModuleObject" class="headerlink" title="createModuleObject()"></a>createModuleObject()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createModuleObject</span>(<span class="params">filePath</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> source = fs.readFileSync(filePath, <span class="string">"utf-8"</span>);</div><div class="line">  <span class="keyword">const</span> requires = detective(source);</div><div class="line">  <span class="keyword">const</span> id = ID++;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    id,</div><div class="line">    filePath,</div><div class="line">    source,</div><div class="line">    requires</div><div class="line">  &#125;;</div></pre></td></tr></table></figure><p> 从目录信息构造需要的模块信息,传入一个文件path路径，返回一个而文件模块对象ModuleObject</p><h3 id="getModules"><a href="#getModules" class="headerlink" title="getModules()"></a>getModules()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getModules</span>(<span class="params">entry</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> rootModule = createModuleObject(entry);</div><div class="line">  <span class="keyword">const</span> modules = [rootModule];</div><div class="line">  <span class="comment">//遍历依赖，把所有引用文件变成模块对象</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> <span class="built_in">module</span> <span class="keyword">of</span> modules) &#123;</div><div class="line">    <span class="built_in">module</span>.map = &#123;&#125;;</div><div class="line">    <span class="built_in">module</span>.requires.forEach(<span class="function"><span class="params">dependency</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> basedir = path.dirname(<span class="built_in">module</span>.filePath);</div><div class="line">      <span class="keyword">const</span> dependencyPath = resolve(dependency, &#123; basedir &#125;);</div><div class="line">      <span class="keyword">const</span> dependencyObject = createModuleObject(dependencyPath);</div><div class="line"></div><div class="line">      <span class="built_in">module</span>.map[dependency] = dependencyObject.id;</div><div class="line">      modules.push(dependencyObject);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> modules;</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><p>  获取所有的模块信息，传入一个入口文件path路径，作为根路径，调用createModuleObject()生成模块对象，遍历根路径的依赖，可以把所有引用文件变成模块对象，返回一个所有文件对象模块的数组，根据ID来调用</p><h3 id="pack"><a href="#pack" class="headerlink" title="pack()"></a>pack()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pack</span>(<span class="params">modules</span>) </span>&#123;</div><div class="line">  <span class="comment">//暴露模块IP和依赖</span></div><div class="line">  <span class="keyword">const</span> modulesSource = modules.map(<span class="function"><span class="params">module</span> =&gt;</span> </div><div class="line">      <span class="string">`<span class="subst">$&#123;<span class="built_in">module</span>.id&#125;</span>:&#123;</span></div><div class="line"><span class="string">            factory:(module , require) &#123;</span></div><div class="line"><span class="string">                <span class="subst">$&#123;<span class="built_in">module</span>.source&#125;</span></span></div><div class="line"><span class="string">            &#125;,</span></div><div class="line"><span class="string">            map:<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(<span class="built_in">module</span>.map)&#125;</span></span></div><div class="line"><span class="string">        &#125;`</span>).join();</div><div class="line">  <span class="comment">//返回一个立即执行的函数</span></div><div class="line">  <span class="keyword">return</span> <span class="string">`(modules =&gt; &#123;</span></div><div class="line"><span class="string">        const require = id =&gt; &#123;</span></div><div class="line"><span class="string">            const &#123; factory, map &#125; = modules[id]</span></div><div class="line"><span class="string">            const localRequire = name =&gt; require(map(name))</span></div><div class="line"><span class="string">            const module = &#123; exports: &#123;&#125; &#125;</span></div><div class="line"><span class="string">            factory(module, localRequire)</span></div><div class="line"><span class="string">            return module.exports</span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">        require(0)</span></div><div class="line"><span class="string">  &#125;)(&#123; <span class="subst">$&#123; modulesSource &#125;</span>)`</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>  传入一个Modules[]数组，通过工厂方式构造一个require()函数，把文件模块的ID和依赖暴露出来，方便require的调用，最后调用require(0),调用跟模块，返回一个立即执行的函数</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">---npm install---</div><div class="line"></div><div class="line"><span class="keyword">const</span> pack = <span class="built_in">require</span>(<span class="string">"../bundle"</span>);</div><div class="line"><span class="keyword">const</span> fileWebpack = pack(path);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;依赖解析&quot;&gt;&lt;a href=&quot;#依赖解析&quot; class=&quot;headerlink&quot; title=&quot;依赖解析&quot;&gt;&lt;/a&gt;依赖解析&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; detective = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;detective&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; requires = detective(source);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;深度遍历寻找依赖，返回一个依赖数组&lt;/p&gt;
&lt;h2 id=&quot;源码比较简单，主要由三个函数构成&quot;&gt;&lt;a href=&quot;#源码比较简单，主要由三个函数构成&quot; class=&quot;headerlink&quot; title=&quot;源码比较简单，主要由三个函数构成&quot;&gt;&lt;/a&gt;源码比较简单，主要由三个函数构成&lt;/h2&gt;&lt;h3 id=&quot;createModuleObject&quot;&gt;&lt;a href=&quot;#createModuleObject&quot; class=&quot;headerlink&quot; title=&quot;createModuleObject()&quot;&gt;&lt;/a&gt;createModuleObject()&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createModuleObject&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;filePath&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; source = fs.readFileSync(filePath, &lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; requires = detective(source);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; id = ID++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    id,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    filePath,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    source,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    requires&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 从目录信息构造需要的模块信息,传入一个文件path路径，返回一个而文件模块对象ModuleObject&lt;/p&gt;
&lt;h3 id=&quot;getModules&quot;&gt;&lt;a href=&quot;#getModules&quot; class=&quot;headerlink&quot; title=&quot;getModules()&quot;&gt;&lt;/a&gt;getModules()&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getModules&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;entry&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; rootModule = createModuleObject(entry);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; modules = [rootModule];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//遍历依赖，把所有引用文件变成模块对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; modules) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.map = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.requires.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;dependency&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; basedir = path.dirname(&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.filePath);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; dependencyPath = resolve(dependency, &amp;#123; basedir &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; dependencyObject = createModuleObject(dependencyPath);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.map[dependency] = dependencyObject.id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      modules.push(dependencyObject);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; modules;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="https://hqiwen.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="webpack JavaScript" scheme="https://hqiwen.github.io/tags/webpack-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>从数据看vue组件</title>
    <link href="https://hqiwen.github.io/2018/06/09/%E4%BB%8E%E6%95%B0%E6%8D%AE%E7%9C%8Bvue%E7%BB%84%E4%BB%B6/"/>
    <id>https://hqiwen.github.io/2018/06/09/从数据看vue组件/</id>
    <published>2018-06-09T00:34:39.000Z</published>
    <updated>2018-06-09T04:53:18.135Z</updated>
    
    <content type="html"><![CDATA[<p>三大前端框架 Vue 、react 和 angular，都提到了一个概念——组件，那么什么是组件——组件（Component）是对数据和方法的简单封装。考虑一个页面，有 UI 的渲染，有状态的改变，有事件的监听。组件正是由这三个方面组成的。现在来看一个简单的组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//绑定class，进行UI渲染</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">v-bind:class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    //传递message值</div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    //监听click事件</div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"reverseMessage"</span>&gt;</span>逆转消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span>&#123;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    el: <span class="string">'#app'</span>,</div><div class="line">    <span class="comment">//页面状态的初始化</span></div><div class="line">    data: &#123;</div><div class="line">        message: <span class="string">'Hello Vue!'</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//事件的处理</span></div><div class="line">    methods: &#123;</div><div class="line">        reverseMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.message = <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>组件关心着三个方面，就是 <strong>UI</strong>，<strong>state</strong>，<strong>event</strong>。vue 用 js 方式注入了样式，状态和事件，当我们编写vue组件时，要考虑这三个方面。样式由css定义，事件是浏览器标准事件，我们主要说说状态。</p><h2 id="组件的状态"><a href="#组件的状态" class="headerlink" title="组件的状态"></a>组件的状态</h2><p>每个组件都可以有自己的状态，从根组件到叶子组件，形成了一个组件树。父组件通过 Prop 向子组件传递数据，同时子组件本身还维持自身的状态。</p><h3 id="受控组件与非受控组件"><a href="#受控组件与非受控组件" class="headerlink" title="受控组件与非受控组件"></a>受控组件与非受控组件</h3><p>如果一个组件的状态完全由父组件prop传入，那么这个组件就叫做受控组件，又称纯组件。我们把上面的例子改成受控组件，省略css。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">v-bind:class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">:message</span> = <span class="string">"message"</span> @<span class="attr">reverse_message</span>=<span class="string">"reverse_message"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    el: <span class="string">'#app'</span>,</div><div class="line">    data: &#123;</div><div class="line">        message: <span class="string">'Hello Vue!'</span></div><div class="line">    &#125;</div><div class="line">    components: &#123;</div><div class="line">        <span class="string">'child'</span>: child,</div><div class="line">    &#125;</div><div class="line">    methods: &#123;</div><div class="line">        reverse_message: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.message = <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">Vue.component(<span class="string">'child'</span>, &#123;</div><div class="line">    props: [<span class="string">'message'</span>],</div><div class="line">    template: <span class="string">`</span></div><div class="line"><span class="string">            &lt;div&gt;</span></div><div class="line"><span class="string">                &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;p&gt;</span></div><div class="line"><span class="string">                &lt;button @click="$emit('reverse_message')"&gt;逆转消息&lt;/button&gt;</span></div><div class="line"><span class="string">            &lt;/div&gt;</span></div><div class="line"><span class="string">            `</span>,</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>在例子中child是受控组件，父组件不是，可以发现 message 状态的维护就交给了父组件，这样称作 <strong>状态提升</strong>，一直把状态提升到首页，就是全局状态处理的问题，这是 Vuex 引入的原因。受控组件没有副作用，不会改变应用的状态，便于理解和维护，这也是受欢迎的原因。</p><h3 id="组件的组合与slot"><a href="#组件的组合与slot" class="headerlink" title="组件的组合与slot"></a>组件的组合与slot</h3><p>slot 是 父组件提供内容，子组件接受内容。下面给出一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">navigation-link</span> <span class="attr">url</span>=<span class="string">"/profile"</span>&gt;</span></div><div class="line">  Your Profile</div><div class="line"><span class="tag">&lt;/<span class="name">navigation-link</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--&lt;navigation-link&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span></span></div><div class="line"><span class="tag">    <span class="attr">v-bind:href</span>=<span class="string">"url"</span></span></div><div class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"nav-link"</span></span></div><div class="line"><span class="tag">&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>认清页面中数据的流动方向，从更高的抽象上理解组件的状态，知道状态提升，理解全局状态——实现状态共享和同步。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三大前端框架 Vue 、react 和 angular，都提到了一个概念——组件，那么什么是组件——组件（Component）是对数据和方法的简单封装。考虑一个页面，有 UI 的渲染，有状态的改变，有事件的监听。组件正是由这三个方面组成的。现在来看一个简单的组件：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//绑定class，进行UI渲染&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;app&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;v-bind:class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //传递message值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123; message &amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //监听click事件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;v-on:click&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;reverseMessage&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;逆转消息&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.container&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="https://hqiwen.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="vue" scheme="https://hqiwen.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>日历插件的重构--引入request.js</title>
    <link href="https://hqiwen.github.io/2018/03/30/%E6%97%A5%E5%8E%86%E6%8F%92%E4%BB%B6%E7%9A%84%E9%87%8D%E6%9E%84-%E5%BC%95%E5%85%A5request-js/"/>
    <id>https://hqiwen.github.io/2018/03/30/日历插件的重构-引入request-js/</id>
    <published>2018-03-30T08:59:56.000Z</published>
    <updated>2018-03-30T09:56:08.360Z</updated>
    
    <content type="html"><![CDATA[<p>在项目过程和状态增加的时候，项目的复杂度增加了，如何对项目进行有效的管理？使用模块化，提炼业务代码的逻辑，有利于适应需求的快速变化。作者使用 request.js 对项目进行了简单重构，阅读源码前最好有相应的 request.js 的基础知识，这将帮助你更好的理解源码。</p><h2 id="request-js-介绍"><a href="#request-js-介绍" class="headerlink" title="request.js 介绍"></a>request.js 介绍</h2><p>对于不懂 request.js 的同学，可以参阅<a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank" rel="external">阮一峰老师的教程</a>,这里介绍了 request.js 的详细用法，本文略带提一下。</p><blockquote><p>定义并引入模块</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//math.js</span></div><div class="line">define([<span class="string">"moduleA"</span>, <span class="string">"moduleB"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">moduleA, moduleB</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> x + y;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// moduleA some code</span></div><div class="line">    <span class="comment">// moduleB some code</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        add: add</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><blockquote><p>加载模块</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">"math"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">math</span>) </span>&#123;</div><div class="line">    alert(math.add(<span class="number">1</span>, <span class="number">1</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><a id="more"></a><h2 id="业务的分析和分离"><a href="#业务的分析和分离" class="headerlink" title="业务的分析和分离"></a>业务的分析和分离</h2><h3 id="data-js-数据分析"><a href="#data-js-数据分析" class="headerlink" title="data.js(数据分析)"></a>data.js(数据分析)</h3><p>项目是日历的编写，那么数据来源是浏览器提供的 date 对象，日历展示的是一个月的数据，通过年月构造函数 getMonthData()来获取一个月的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getMonthData</span>(<span class="params">year, month</span>) </span>&#123;</div><div class="line">        <span class="comment">//new Date</span></div><div class="line">        <span class="comment">//处理格式</span></div><div class="line">        <span class="comment">//返回数据</span></div><div class="line">        <span class="keyword">return</span> &#123; <span class="attr">year</span>: year,</div><div class="line">                month: month,</div><div class="line">                days: [&#123;</div><div class="line">                    month: month,</div><div class="line">                    date: date</div><div class="line">                &#125;]&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span>&#123;</div><div class="line">        getMonthData: getMonthData</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="render-js（展示分析）"><a href="#render-js（展示分析）" class="headerlink" title="render.js（展示分析）"></a>render.js（展示分析）</h3><p>拿到数据并将数据展示出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'data'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="comment">//获取数据</span></div><div class="line">    monthData = data.getMonthData();</div><div class="line">    <span class="comment">//建立DOM结构</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">buildUI</span>(<span class="params">monthdata</span>)</span>&#123;</div><div class="line">        <span class="comment">//some code</span></div><div class="line">        <span class="keyword">return</span> html</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//上下月判断处理</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">direction</span>(<span class="params">dir</span>)</span>&#123;&#125;</div><div class="line">    <span class="comment">//渲染DOM结构</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">dir</span>)</span>&#123;</div><div class="line">        direction(dir)</div><div class="line">        <span class="comment">//some code</span></div><div class="line">        $wrapper.innerHTML = html;</div><div class="line">        <span class="built_in">document</span>.body.appendChild($wrapper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    retrun &#123;</div><div class="line">        render: render</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="event-js（功能分析）"><a href="#event-js（功能分析）" class="headerlink" title="event.js（功能分析）"></a>event.js（功能分析）</h3><ul><li>当点击输入输入框的时候可以开放或者关闭日历</li><li>当点击上一月的按钮时，切换到上一个月的数据</li><li>当点击下一月的按钮时，切换到下一个月的数据</li><li>当点击日历上的数据时，在输入框中显示其日期</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'render'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">render</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showInput</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeMonthData</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        render(<span class="string">"prev/next"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        showInput: showInput,</div><div class="line">        changeMonthData: changeMonthData,</div><div class="line">        getDate:getDate,</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="mian-js"><a href="#mian-js" class="headerlink" title="mian.js"></a>mian.js</h3><p>项目的入口，实行项目的初始化，提供可供用户操作的接口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">"render"</span>,<span class="string">"event"</span>],<span class="function"><span class="keyword">function</span>(<span class="params">render,event</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//初始渲染</span></div><div class="line">        render.render();</div><div class="line">        <span class="comment">//事件监听与绑定</span></div><div class="line">        $input.addEventListener(<span class="string">"click"</span>, event.showInput, <span class="literal">false</span>);</div><div class="line">        $wrapper.addEventListener(<span class="string">"click"</span>, event.changeMonthData, <span class="literal">false</span>);</div><div class="line">        $wrapper.addEventListener(<span class="string">"click"</span>, event.getDate, <span class="literal">false</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        init: init,</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="模块依赖"><a href="#模块依赖" class="headerlink" title="模块依赖"></a>模块依赖</h2><img src="/2018/03/30/日历插件的重构-引入request-js/模块.png" alt="400 266" title="400 266"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过对项目进行重构，简化了业务的逻辑，对模块化的思想有了更加深刻的认识，现代大型项目的构建离不开模块化。比较好的模块化框架有<a href="http://javascript.ruanyifeng.com/nodejs/module.html" target="_blank" rel="external">common.js</a>,<a href="http://requirejs.org/" target="_blank" rel="external">request.js</a>,<a href="https://seajs.github.io/seajs/docs/" target="_blank" rel="external">sea.js</a>。学会模块化的思维，将帮助我们成长为更好的工程师。</p><p>项目地址<a href="https://github.com/hqiwen/datepicker" target="_blank" rel="external">https://github.com/hqiwen/datepicker</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在项目过程和状态增加的时候，项目的复杂度增加了，如何对项目进行有效的管理？使用模块化，提炼业务代码的逻辑，有利于适应需求的快速变化。作者使用 request.js 对项目进行了简单重构，阅读源码前最好有相应的 request.js 的基础知识，这将帮助你更好的理解源码。&lt;/p&gt;
&lt;h2 id=&quot;request-js-介绍&quot;&gt;&lt;a href=&quot;#request-js-介绍&quot; class=&quot;headerlink&quot; title=&quot;request.js 介绍&quot;&gt;&lt;/a&gt;request.js 介绍&lt;/h2&gt;&lt;p&gt;对于不懂 request.js 的同学，可以参阅&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/11/require_js.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰老师的教程&lt;/a&gt;,这里介绍了 request.js 的详细用法，本文略带提一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;定义并引入模块&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//math.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;define([&lt;span class=&quot;string&quot;&gt;&quot;moduleA&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;moduleB&quot;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;moduleA, moduleB&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; add = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// moduleA some code&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// moduleB some code&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        add: add&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;加载模块&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&quot;math&quot;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;math&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    alert(math.add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="https://hqiwen.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="request.js" scheme="https://hqiwen.github.io/tags/request-js/"/>
    
  </entry>
  
  <entry>
    <title>麻醉药</title>
    <link href="https://hqiwen.github.io/2018/03/09/%E9%BA%BB%E9%86%89%E8%8D%AF/"/>
    <id>https://hqiwen.github.io/2018/03/09/麻醉药/</id>
    <published>2018-03-09T05:57:20.000Z</published>
    <updated>2018-11-23T09:14:16.340Z</updated>
    
    <content type="html"><![CDATA[<p>麻醉药分为全身麻醉药和局部麻醉药。全麻药是具有麻醉功能，能可逆性抑制中枢神经系统功能，引起暂时性感觉、意识和反射消失的药物。局麻药作用神经系统末梢，能暂时、可逆地阻断神经冲动的产生和传导。</p><img src="/2018/03/09/麻醉药/麻醉.jpg" alt="麻醉.jpg" title=""><h2 id="麻醉四期"><a href="#麻醉四期" class="headerlink" title="麻醉四期"></a>麻醉四期</h2><table><thead><tr><th>麻醉分期</th><th>表现</th></tr></thead><tbody><tr><td>第一期(镇痛期)</td><td>麻醉给药到患者意识完全消失，出现镇痛及健忘的麻醉状态</td></tr><tr><td>第二期(兴奋期)</td><td>感觉和意识消失到外科麻醉期，患者兴奋躁动、呼吸不规则、血压不稳定</td></tr><tr><td>第三期(外科麻醉期)</td><td>患者恢复安静，呼吸和血压平稳</td></tr><tr><td>第四期(延髓麻醉期)</td><td>呼吸停止，血压剧降 </td></tr></tbody></table><a id="more"></a><h2 id="全麻药"><a href="#全麻药" class="headerlink" title="全麻药"></a>全麻药</h2><h3 id="吸入性麻醉药"><a href="#吸入性麻醉药" class="headerlink" title="吸入性麻醉药"></a>吸入性麻醉药</h3><p>吸入性麻醉药是挥发性液体或气体的全麻药，经呼吸道吸入给药，给药后由呼吸道经肺泡吸收，麻醉深度可以通过对吸入气体中的全麻药浓度(分压)进行调控并维持其效应在满足手术需要的浓度。常用药物有麻醉乙醚，氟烷，氧化亚氮(笑气)。</p><ul><li>麻醉乙醚：是经典的麻醉药，为无色澄明易挥发液体，有特异臭味，易燃易爆，易氧化产生毒性，乙醚的诱导期和苏醒期较长，易发生麻醉意外。使用简便，在野外、救灾时很重要。</li><li>氟烷：无色透明液体，麻醉作用快而强，麻醉诱导期短而苏醒快</li><li>笑气：无色味甜无刺激性液态气体，性质稳定，诱导期短而苏醒快</li></ul><h3 id="静脉麻醉药"><a href="#静脉麻醉药" class="headerlink" title="静脉麻醉药"></a>静脉麻醉药</h3><ul><li>硫喷妥钠：超短效的巴比妥类药物，静脉注射后几秒钟即可进入脑组织，麻醉作用迅速，镇痛作用差，肌肉松弛不完全，用于各种短时手术。</li><li>氯胺酮：对体表镇痛作用明显，内脏镇痛作用差，用于短时的体表小手术，如烧伤清创、切痂、植皮等。</li></ul><h2 id="局麻药"><a href="#局麻药" class="headerlink" title="局麻药"></a>局麻药</h2><ul><li>普鲁卡因：毒性小，短效酯类麻醉药，对粘膜的穿透性弱，一般不用于表面麻醉，常局部注射用于浸润麻醉、传导麻醉和蛛网膜下腔麻醉。</li><li>利多卡因：是目前应用最多的局麻药，起效快、作用强而持久，可用于多种形式的局部麻醉，有全能麻醉药之称，用于传导麻醉和硬脑膜外麻醉</li></ul><p>麻醉药多种多样，但都是抑制兴奋在神经纤维上的传导，改变局部的离子变化，引起电位变化，不同的给药的方式也会产生不同的药效。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;麻醉药分为全身麻醉药和局部麻醉药。全麻药是具有麻醉功能，能可逆性抑制中枢神经系统功能，引起暂时性感觉、意识和反射消失的药物。局麻药作用神经系统末梢，能暂时、可逆地阻断神经冲动的产生和传导。&lt;/p&gt;
&lt;img src=&quot;/2018/03/09/麻醉药/麻醉.jpg&quot; alt=&quot;麻醉.jpg&quot; title=&quot;&quot;&gt;
&lt;h2 id=&quot;麻醉四期&quot;&gt;&lt;a href=&quot;#麻醉四期&quot; class=&quot;headerlink&quot; title=&quot;麻醉四期&quot;&gt;&lt;/a&gt;麻醉四期&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;麻醉分期&lt;/th&gt;
&lt;th&gt;表现&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;第一期(镇痛期)&lt;/td&gt;
&lt;td&gt;麻醉给药到患者意识完全消失，出现镇痛及健忘的麻醉状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第二期(兴奋期)&lt;/td&gt;
&lt;td&gt;感觉和意识消失到外科麻醉期，患者兴奋躁动、呼吸不规则、血压不稳定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第三期(外科麻醉期)&lt;/td&gt;
&lt;td&gt;患者恢复安静，呼吸和血压平稳&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第四期(延髓麻醉期)&lt;/td&gt;
&lt;td&gt;呼吸停止，血压剧降 &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://hqiwen.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>肾的功能性利尿</title>
    <link href="https://hqiwen.github.io/2018/03/09/%E8%82%BE%E7%9A%84%E5%8A%9F%E8%83%BD%E6%80%A7%E5%88%A9%E5%B0%BF/"/>
    <id>https://hqiwen.github.io/2018/03/09/肾的功能性利尿/</id>
    <published>2018-03-09T05:55:15.000Z</published>
    <updated>2018-11-23T09:14:10.833Z</updated>
    
    <content type="html"><![CDATA[<p>肾脏是排出$Na^+$、$Cl^-$等电解质和水的重要器官，加速电解质和水的排出，就称为利尿。利尿药主要用于各种原因引起的水肿，如心力衰竭、肾衰竭以及肝硬化，也可用于高血压、肾结石、高血钙等的治疗。</p><img src="/2018/03/09/肾的功能性利尿/U.jpg" alt="U.jpg" title=""><p>常用利尿药可以分为5类：</p><h2 id="碳酸酐酶抑制药：乙酰脞胺"><a href="#碳酸酐酶抑制药：乙酰脞胺" class="headerlink" title="碳酸酐酶抑制药：乙酰脞胺"></a>碳酸酐酶抑制药：乙酰脞胺</h2><p>通过抑制碳酸酐酶的活性而抑制$HCO_3^-$的重吸收，由于离子交换，造成尿中H、$K^+$、水($Na^+$)的排出增多。同时也可抑制房水和脑脊液的分泌，本品利尿作用弱，少用。</p><p>临床用途：青光眼(降低眼内压，抑制房水分泌)、急性高山病<br><a id="more"></a></p><h2 id="脱水药：甘露醇"><a href="#脱水药：甘露醇" class="headerlink" title="脱水药：甘露醇"></a>脱水药：甘露醇</h2><p>静脉注射后提高血浆渗透压，使组织液向血浆转移而产生组织脱水作用，可降低颅内压和眼内压。另一方面，血容量的增加使肾小球滤过率增加，产生利尿作用。</p><h2 id="髓袢利尿药：呋塞米"><a href="#髓袢利尿药：呋塞米" class="headerlink" title="髓袢利尿药：呋塞米"></a>髓袢利尿药：呋塞米</h2><p>抑制髓袢$Na^+$-$K^+$-2$Cl^-$转运，抑制<br>$NaCl$的重吸收，降低肾的稀释与浓缩功能，排出大量接近等渗的尿液，是目前最有效的利尿药。</p><p>临床用途：急性肺水肿和脑水肿、急慢性肾衰竭和加速某些毒物的排出。</p><h2 id="噻嗪类-氢氯噻嗪"><a href="#噻嗪类-氢氯噻嗪" class="headerlink" title="噻嗪类:氢氯噻嗪"></a>噻嗪类:氢氯噻嗪</h2><p>抑制近曲小管$Na^+$-$Cl^-$的转运，抑制$NaCl$的重吸收，产生温和持久的利尿作用。排出$Na^+$使血浆渗透压降低而减轻口渴感。</p><p>临床应用：各种类型的水肿、高血压病、尿崩症</p><h2 id="醛固酮受体拮抗药：螺内酯"><a href="#醛固酮受体拮抗药：螺内酯" class="headerlink" title="醛固酮受体拮抗药：螺内酯"></a>醛固酮受体拮抗药：螺内酯</h2><p>醛固酮与受体结合发挥保$Na^+$排$K^+$的作用，螺内酯是醛固酮的竞争性拮抗药，影响醛固酮的作用，表现出排NA保K的作用，利尿作用弱。</p><p>临床应用：与醛固酮升高有关的水肿(肝硬化、肾病综合征)</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>利尿药可以促进$Na^+$、$Cl^-$等电解质和水的排出，可以用于纠正<strong>电解质失衡</strong>和<strong>水失衡</strong>，利尿有助于降低血容量，对心脏做功有较好的预防和保护作用，对肾功能失调的可以延缓肾脏衰竭。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;肾脏是排出$Na^+$、$Cl^-$等电解质和水的重要器官，加速电解质和水的排出，就称为利尿。利尿药主要用于各种原因引起的水肿，如心力衰竭、肾衰竭以及肝硬化，也可用于高血压、肾结石、高血钙等的治疗。&lt;/p&gt;
&lt;img src=&quot;/2018/03/09/肾的功能性利尿/U.jpg&quot; alt=&quot;U.jpg&quot; title=&quot;&quot;&gt;
&lt;p&gt;常用利尿药可以分为5类：&lt;/p&gt;
&lt;h2 id=&quot;碳酸酐酶抑制药：乙酰脞胺&quot;&gt;&lt;a href=&quot;#碳酸酐酶抑制药：乙酰脞胺&quot; class=&quot;headerlink&quot; title=&quot;碳酸酐酶抑制药：乙酰脞胺&quot;&gt;&lt;/a&gt;碳酸酐酶抑制药：乙酰脞胺&lt;/h2&gt;&lt;p&gt;通过抑制碳酸酐酶的活性而抑制$HCO_3^-$的重吸收，由于离子交换，造成尿中H、$K^+$、水($Na^+$)的排出增多。同时也可抑制房水和脑脊液的分泌，本品利尿作用弱，少用。&lt;/p&gt;
&lt;p&gt;临床用途：青光眼(降低眼内压，抑制房水分泌)、急性高山病&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://hqiwen.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>肾的内分泌药理</title>
    <link href="https://hqiwen.github.io/2018/03/09/%E8%82%BE%E7%9A%84%E5%86%85%E5%88%86%E6%B3%8C%E8%8D%AF%E7%90%86/"/>
    <id>https://hqiwen.github.io/2018/03/09/肾的内分泌药理/</id>
    <published>2018-03-09T05:39:25.000Z</published>
    <updated>2018-11-23T09:14:04.139Z</updated>
    
    <content type="html"><![CDATA[<p>肾脏是人体的过滤和排泄废物的器官，有保留$Na^{+}$排出$K^{+}$分泌$H^{+}$的作用，同时可以控制尿量来维持血容量，与心血管系统的功能密切相关。</p><p>肾脏可以分泌肾素，肾素使血管紧张素原转化成血管紧张素1（Ang1），血管紧张素1（Ang1）可以在血管紧张素转化酶（ACE）的作用下转化成血管紧张素2（Ang2）。Ang2有两个受体$AT<em>{1}$<br>和<br>$AT</em>{2}$,$AT<em>{1}$受体激动产生<strong>收缩血管</strong>，促进醛固酮的释放，增加血容量，<strong>升高血压</strong>等作用，还有生长激素样作用，可以<strong>促进心肌肥大</strong>，$AT</em>{2}$受体激活缓激肽受体和NO合酶，产生NO，<strong>舒张血管</strong>，<strong>降低血压</strong>，促进细胞凋亡。<br><a id="more"></a><br><img src="/2018/03/09/肾的内分泌药理/ACE.jpg" alt="ACE.jpg" title=""></p><ul><li>ACE抑制药:卡托普利<ul><li>药理作用<ul><li>阻止Ang2的生成：取消Ang2的收缩血管、刺激醛固酮释放、增加血容量、升高血压与促进心肌肥大，有利于高血压、心力衰竭和心血管的重构</li><li>保存缓激肽的活性：缓激肽激活受体，使NO和PGI2（前列腺素）生成增加，而NO和PGI2都可以舒张血管、降低血压、抗血小板聚集、抗心肌细胞肥大增生</li><li>增敏胰岛素受体：增加糖尿病和高血压患者对胰岛素的敏感性</li></ul></li><li>临床应用<ul><li>高血压、充血性心力衰竭、心肌梗死和糖尿病性肾病</li></ul></li><li>不良反应<ul><li>首剂低血压：口服吸收快、生物利用度高的ACE抑制药，出现首剂低血压</li><li><strong>咳嗽</strong>：ACE抑制药使缓激肽和PG在肺内积蓄</li><li><strong>肾功能损伤</strong>：在肾动脉阻塞或肾动脉硬化的患者，本身产生Ang2收缩出球小动脉维持灌注压，ACE抑制药能扩张出球小动脉，降低肾滤过率，削弱肾功能</li><li>血管神经性水肿：常发生于面部，与扩张血管液体渗出有关</li></ul></li></ul></li></ul><img src="/2018/03/09/肾的内分泌药理/AT.gif" alt="AT.gif" title=""><ul><li><p>$AT_{1}$拮抗药：氯沙坦</p><ul><li><p>Ang2激活$AT_{2}$受体，激活缓激肽——NO途径，产生舒张血压、抑制心血管重构等作用，有益于高血压和心力衰竭的治疗</p></li><li><p>不良反应：由于肾素反馈性升高，激活交感神经，产生收缩血管和舒张支气管的作用，故<strong>没有咳嗽和水肿</strong>等不良反应，其余则与ACE抑制药一样</p></li></ul></li></ul><p>对肾脏的内分泌的影响，都可以产生<strong>舒张血管</strong>和<strong>抑制心血管重构</strong>的作用，用于<strong>高血压</strong>的和<strong>心力衰竭</strong>的治疗</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;肾脏是人体的过滤和排泄废物的器官，有保留$Na^{+}$排出$K^{+}$分泌$H^{+}$的作用，同时可以控制尿量来维持血容量，与心血管系统的功能密切相关。&lt;/p&gt;
&lt;p&gt;肾脏可以分泌肾素，肾素使血管紧张素原转化成血管紧张素1（Ang1），血管紧张素1（Ang1）可以在血管紧张素转化酶（ACE）的作用下转化成血管紧张素2（Ang2）。Ang2有两个受体$AT&lt;em&gt;{1}$&lt;br&gt;和&lt;br&gt;$AT&lt;/em&gt;{2}$,$AT&lt;em&gt;{1}$受体激动产生&lt;strong&gt;收缩血管&lt;/strong&gt;，促进醛固酮的释放，增加血容量，&lt;strong&gt;升高血压&lt;/strong&gt;等作用，还有生长激素样作用，可以&lt;strong&gt;促进心肌肥大&lt;/strong&gt;，$AT&lt;/em&gt;{2}$受体激活缓激肽受体和NO合酶，产生NO，&lt;strong&gt;舒张血管&lt;/strong&gt;，&lt;strong&gt;降低血压&lt;/strong&gt;，促进细胞凋亡。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://hqiwen.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>肾上腺素受体的阻断作用</title>
    <link href="https://hqiwen.github.io/2017/12/29/%E8%82%BE%E4%B8%8A%E8%85%BA%E7%B4%A0%E5%8F%97%E4%BD%93%E7%9A%84%E9%98%BB%E6%96%AD%E4%BD%9C%E7%94%A8/"/>
    <id>https://hqiwen.github.io/2017/12/29/肾上腺素受体的阻断作用/</id>
    <published>2017-12-29T03:10:52.000Z</published>
    <updated>2018-11-23T09:13:57.739Z</updated>
    
    <content type="html"><![CDATA[<p>前一章提到了肾上腺素受体的三种激动作用，与之对应存在三种阻断药：α受体阻断药、β受体阻断药以及 α、β受体阻断药。</p><h2 id="α受体阻断药：酚妥拉明"><a href="#α受体阻断药：酚妥拉明" class="headerlink" title="α受体阻断药：酚妥拉明"></a>α受体阻断药：酚妥拉明</h2><ul><li>血管：酚妥拉明具有阻断血管平滑肌α受体和直接<strong>扩张血管</strong>作用。</li><li>心脏：酚妥拉明可<strong>兴奋心脏</strong>，使心脏收缩力增强，心率加快，心输出量增加，与阻断α受体，β受体反馈性增加有关，β受体可对心脏产生正性做作用。</li><li>酚妥拉明可引起皮肤潮红。</li></ul><p>临床应用：治疗外周血管痉挛性疾病，<strong>顽固性充血性心力衰竭</strong>和<strong>急性心肌梗死</strong>，<strong>抗休克</strong>，药物引起的高血压。<br><a id="more"></a></p><h2 id="β受体阻断药：普萘诺尔（心得安）"><a href="#β受体阻断药：普萘诺尔（心得安）" class="headerlink" title="β受体阻断药：普萘诺尔（心得安）"></a>β受体阻断药：普萘诺尔（心得安）</h2><ul><li>心血管：对心脏<strong>抑制作用</strong>明显，表现为心率减慢、心肌收缩力减弱、心输出量减少。对高血压具有降压作用，但降压机制不明确。</li><li>支气管：β受体阻断药阻断支气管平滑肌的 β2受体，<strong>收缩支气管平滑肌</strong>而增加呼吸道阻力。</li><li>甲状腺：<strong>抑制</strong>甲状腺素T4转变为三碘甲状腺原氨酸T3的过程，有效控制甲亢的症状。</li></ul><p>临床应用：快速型心室失常，心绞痛和心肌梗死，高血压，甲状腺功能亢进。</p><p>到目前为止，我们已经了解传出神经系统的方方面面，回顾一下，中枢神经通过对传出神经对躯体进行控制，通过神经递质发挥相应的作用，对应的效应器有<strong>心脏</strong>，<strong>血管</strong>（循环系统）、胃肠道（消化系统）、<strong>支气管</strong>（呼吸系统）、泌尿系统、腺体和眼睛。其中心血管是我们介绍的重点，在这里简单介绍，希望大家了解一些常见药的药理作用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前一章提到了肾上腺素受体的三种激动作用，与之对应存在三种阻断药：α受体阻断药、β受体阻断药以及 α、β受体阻断药。&lt;/p&gt;
&lt;h2 id=&quot;α受体阻断药：酚妥拉明&quot;&gt;&lt;a href=&quot;#α受体阻断药：酚妥拉明&quot; class=&quot;headerlink&quot; title=&quot;α受体阻断药：酚妥拉明&quot;&gt;&lt;/a&gt;α受体阻断药：酚妥拉明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;血管：酚妥拉明具有阻断血管平滑肌α受体和直接&lt;strong&gt;扩张血管&lt;/strong&gt;作用。&lt;/li&gt;
&lt;li&gt;心脏：酚妥拉明可&lt;strong&gt;兴奋心脏&lt;/strong&gt;，使心脏收缩力增强，心率加快，心输出量增加，与阻断α受体，β受体反馈性增加有关，β受体可对心脏产生正性做作用。&lt;/li&gt;
&lt;li&gt;酚妥拉明可引起皮肤潮红。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;临床应用：治疗外周血管痉挛性疾病，&lt;strong&gt;顽固性充血性心力衰竭&lt;/strong&gt;和&lt;strong&gt;急性心肌梗死&lt;/strong&gt;，&lt;strong&gt;抗休克&lt;/strong&gt;，药物引起的高血压。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://hqiwen.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="肾上腺素 阻断作用" scheme="https://hqiwen.github.io/tags/%E8%82%BE%E4%B8%8A%E8%85%BA%E7%B4%A0-%E9%98%BB%E6%96%AD%E4%BD%9C%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>肾上腺素受体的激动作用</title>
    <link href="https://hqiwen.github.io/2017/12/29/%E8%82%BE%E4%B8%8A%E8%85%BA%E7%B4%A0%E5%8F%97%E4%BD%93%E7%9A%84%E6%BF%80%E5%8A%A8%E4%BD%9C%E7%94%A8/"/>
    <id>https://hqiwen.github.io/2017/12/29/肾上腺素受体的激动作用/</id>
    <published>2017-12-29T03:07:28.000Z</published>
    <updated>2018-11-23T09:13:51.543Z</updated>
    
    <content type="html"><![CDATA[<p>肾上腺素受体分为 α 受体和 β 受体，对肾上腺素受体亚型的选择性，可以分为3类药：α 受体激动药，β 受体激动药和 α、β 受体激动药。</p><h2 id="α受体激动药-去甲肾上腺素"><a href="#α受体激动药-去甲肾上腺素" class="headerlink" title="α受体激动药:去甲肾上腺素"></a>α受体激动药:去甲肾上腺素</h2><ol><li>血管：激动血管α1受体，使<strong>血管收缩</strong>，主要使小动脉和小静脉收缩，皮肤粘膜血管收缩最明显，其次是肾血管。</li><li>心脏：较弱激动心脏β1受体，对心脏产生<strong>正向效应</strong>。</li></ol><a id="more"></a><h2 id="β受体激动药：异丙肾上腺素"><a href="#β受体激动药：异丙肾上腺素" class="headerlink" title="β受体激动药：异丙肾上腺素"></a>β受体激动药：异丙肾上腺素</h2><ol><li>心脏：对心脏β受体有强大的激动作用，产生<strong>正向效应</strong>。</li><li>血管：对血管产生<strong>舒张作用</strong>，主要是激动β受体使骨骼肌血管扩张。</li><li>支气管平滑肌：激动β受体，<strong>舒张</strong>支气管平滑肌。</li><li>代谢：增加糖原分解，<strong>增加</strong>组织耗氧量。</li></ol><h2 id="α、β受体激动药：肾上腺素"><a href="#α、β受体激动药：肾上腺素" class="headerlink" title="α、β受体激动药：肾上腺素"></a>α、β受体激动药：肾上腺素</h2><ol><li>心脏：作用于心脏β受体，加强心肌收缩性，加速传导，加快心率，提高心肌的兴奋性,<strong>正向作用</strong>。</li><li>激动血管平滑肌上α受体，血管收缩，激动β受体，血管舒张。<strong>皮肤黏膜</strong>、<strong>肾</strong>和<strong>胃肠道</strong>α受体占优势，表现为<strong>收缩</strong>；<strong>骨骼肌</strong>和<strong>肝脏</strong>上的β受体占优势，小剂量使其<strong>舒张</strong>。</li><li>平滑肌：激动β受体，舒张支气管，胃肠道平滑肌张力下降，引起排尿困难和尿潴留。</li><li>代谢：肾上腺素提高机体代谢，使耗氧量增加20%到30%。</li></ol><p>综上：三者都对心脏有<strong>正向效应</strong>，但去甲肾上腺素对心脏的兴奋作用较弱，故多用异丙肾上腺素和肾上腺素来抢救<strong>休克</strong>和<strong>心搏骤停</strong>；异丙肾上腺素和肾上腺素可<strong>舒张支气管</strong>，可用于<strong>支气管哮喘</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;肾上腺素受体分为 α 受体和 β 受体，对肾上腺素受体亚型的选择性，可以分为3类药：α 受体激动药，β 受体激动药和 α、β 受体激动药。&lt;/p&gt;
&lt;h2 id=&quot;α受体激动药-去甲肾上腺素&quot;&gt;&lt;a href=&quot;#α受体激动药-去甲肾上腺素&quot; class=&quot;headerlink&quot; title=&quot;α受体激动药:去甲肾上腺素&quot;&gt;&lt;/a&gt;α受体激动药:去甲肾上腺素&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;血管：激动血管α1受体，使&lt;strong&gt;血管收缩&lt;/strong&gt;，主要使小动脉和小静脉收缩，皮肤粘膜血管收缩最明显，其次是肾血管。&lt;/li&gt;
&lt;li&gt;心脏：较弱激动心脏β1受体，对心脏产生&lt;strong&gt;正向效应&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://hqiwen.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="肾上腺素 激动作用" scheme="https://hqiwen.github.io/tags/%E8%82%BE%E4%B8%8A%E8%85%BA%E7%B4%A0-%E6%BF%80%E5%8A%A8%E4%BD%9C%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>乙酰胆碱的阻断作用</title>
    <link href="https://hqiwen.github.io/2017/12/25/%E4%B9%99%E9%85%B0%E8%83%86%E7%A2%B1%E7%9A%84%E9%98%BB%E6%96%AD%E4%BD%9C%E7%94%A8/"/>
    <id>https://hqiwen.github.io/2017/12/25/乙酰胆碱的阻断作用/</id>
    <published>2017-12-25T09:41:53.000Z</published>
    <updated>2018-11-23T09:12:57.775Z</updated>
    
    <content type="html"><![CDATA[<p>胆碱受体分为M受体和N受体，上一节我们知道了M受体激动和N受体激动会产生不同的生理效应，现代药物可以分别阻断不同的受体来产生不同的反应。</p><ul><li>M胆碱受体阻断药：<strong>阿托品</strong>：</li></ul><ol><li><p>心血管系统：</p><p> 1.1 心脏：<strong>小剂量</strong>时ACH受阻负反馈增加，对心脏产生<strong>负性效应</strong>，<strong>大剂量</strong>时ACH完全被阻断，产生<strong>正性效应</strong>，使心率加快，可拮抗房室传导阻滞和心律失常。</p><p> 1.2 血管：阿托品拮抗ACH类药引起的<strong>外周血管扩张</strong>和<strong>血压下降</strong>，大剂量时引起体温升高使散热增加，引起皮肤血管扩张，出现皮肤潮红、温热。</p></li><li><p>平滑肌<br>阿托品对多种内脏平滑肌有<strong>松弛作用</strong>，对过度活动或痉挛的平滑肌作用明显。可以抑制胃肠平滑肌的痉挛，缓解肠胃绞痛，降低尿道和膀胱的张力，接触输尿管张力增高。</p><a id="more"></a></li><li><p>腺体<br>阿托品可以<strong>抑制腺体分泌</strong>，对唾液腺和汗腺最敏感。</p></li><li><p>眼<br>阿托品可以扩瞳，使<strong>眼内压增高</strong>，调节麻痹。</p><p>用途:<strong>接触平滑肌痉挛，抑制腺体分泌，解除缓慢型心律失常，解救有机磷酸酯类中毒（含磷农药）</strong>。</p></li></ol><ul><li><p>N胆碱受体阻断</p><p>  作用于神经肌肉接头的N胆碱受体，产生<strong>肌肉阻滞</strong>作用，只能使骨骼肌麻痹，而不产生麻醉作用，不能使神志和感觉消失，不产生遗忘作用。代表药：司可林，用途：气管插管，气管镜，食管镜，辅助麻醉。</p></li></ul><p>课外拓展：</p><ul><li><a href="https://baike.baidu.com/item/%E9%98%BF%E6%89%98%E5%93%81" target="_blank" rel="external">阿托品</a></li><li><a href="https://baike.baidu.com/item/%E5%8F%B8%E5%8F%AF%E6%9E%97" target="_blank" rel="external">司可林</a></li><li><a href="https://baike.baidu.com/item/%E5%93%8C%E4%BB%91%E8%A5%BF%E5%B9%B3" target="_blank" rel="external">哌仑西平</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;胆碱受体分为M受体和N受体，上一节我们知道了M受体激动和N受体激动会产生不同的生理效应，现代药物可以分别阻断不同的受体来产生不同的反应。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;M胆碱受体阻断药：&lt;strong&gt;阿托品&lt;/strong&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;心血管系统：&lt;/p&gt;
&lt;p&gt; 1.1 心脏：&lt;strong&gt;小剂量&lt;/strong&gt;时ACH受阻负反馈增加，对心脏产生&lt;strong&gt;负性效应&lt;/strong&gt;，&lt;strong&gt;大剂量&lt;/strong&gt;时ACH完全被阻断，产生&lt;strong&gt;正性效应&lt;/strong&gt;，使心率加快，可拮抗房室传导阻滞和心律失常。&lt;/p&gt;
&lt;p&gt; 1.2 血管：阿托品拮抗ACH类药引起的&lt;strong&gt;外周血管扩张&lt;/strong&gt;和&lt;strong&gt;血压下降&lt;/strong&gt;，大剂量时引起体温升高使散热增加，引起皮肤血管扩张，出现皮肤潮红、温热。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;平滑肌&lt;br&gt;阿托品对多种内脏平滑肌有&lt;strong&gt;松弛作用&lt;/strong&gt;，对过度活动或痉挛的平滑肌作用明显。可以抑制胃肠平滑肌的痉挛，缓解肠胃绞痛，降低尿道和膀胱的张力，接触输尿管张力增高。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://hqiwen.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>乙酰胆碱的促进作用</title>
    <link href="https://hqiwen.github.io/2017/12/25/%E4%B9%99%E9%85%B0%E8%83%86%E7%A2%B1%E7%9A%84%E4%BF%83%E8%BF%9B%E4%BD%9C%E7%94%A8/"/>
    <id>https://hqiwen.github.io/2017/12/25/乙酰胆碱的促进作用/</id>
    <published>2017-12-25T09:39:04.000Z</published>
    <updated>2018-11-23T09:12:47.693Z</updated>
    
    <content type="html"><![CDATA[<p>乙酰胆碱（下面将以ACH代指）是中枢和外周神经系统的内源性神经递质，作用于 M 胆碱受体和 N 胆碱受体。在这一节里，我们重点介绍ACH的作用，ACH性质不稳定，极易被体内的ACH酶所分解，普通作用于各个器官，对各个器官的选择性较差。</p><p>下面逐个介绍ACH的作用：</p><ul><li>M样作用</li></ul><ol><li><p>心血管系统</p><p> 1.1 <strong>舒张血管</strong> ：ACH 作用血管内皮细胞 M3 受体，引起NO的释放，从而是临近平滑肌松弛，小剂量静脉注射可舒张全身血管。</p><p> 1.2 心脏 ： ACH 减弱心肌收缩力，减慢心率，对心脏产生<strong>负性作用</strong>。</p></li><li><p>胃肠道</p><p> ACh 兴奋胃肠道平滑肌，<strong>促进胃肠分泌</strong>，引起恶心、呕吐、腹痛、嗳气</p><a id="more"></a></li><li><p>泌尿道</p><p> ACH 使泌尿道平滑肌蠕动增加，膀胱逼尿肌收缩，导致<strong>膀胱排空</strong>。</p></li><li><p>腺体</p><p> ACH 使泪腺、气管、支气管腺体、唾液腺、消化腺和汗腺分泌增加，<strong>腺体分泌增加</strong>。</p></li><li><p>眼</p><p> ACH 局部滴眼可是瞳孔缩小，睫状肌收缩，<strong>降低眼内压</strong>。</p></li><li><p>支气管</p><p> ACH 使支气管收缩。</p></li></ol><ul><li>N样作用</li></ul><ol><li><p>骨骼肌</p><p> ACH 作用于骨骼肌神经肌肉接头的 N 胆碱受体，可使<strong>骨骼肌收缩</strong>。</p></li></ol><p>枯燥的理论使人犯乏，接下来介绍两种药,将要用到上面的知识。</p><ul><li><p>毛果芸香碱（天然形成的拟胆碱药）</p><blockquote><p>青光眼 ： 进行性视神经乳头凹陷和视力减退为主要特征，并伴有眼内压升高，严重者可以导致失明。</p></blockquote><p><strong>低浓度</strong>的毛果芸香碱滴眼可以用于治疗<strong>青光眼</strong>，用药后使瞳孔缩小，前房角间隙扩大，房水回流通畅，眼内压降低。但高浓度的药物可使患者症状加重。（使用时请谨遵医嘱）</p></li><li><p>新斯的明</p><p>通过抑制ACH酶对 ACH 的分解，发挥ACH的作用，兴奋M、N胆碱受体，兴奋胃肠平滑肌、泌尿道平滑肌和骨骼肌，用于<strong>治疗重症肌无力、腹气胀和尿滞留</strong>。</p></li></ul><p>由于药物多种多样，我们只谈具有代表性的，理解了ACH 的作用，我想大部分这类的药的用法你将了然于胸。不同品种的药，可能药效不一样，但其产生的效应将是一样的。你可能希望读一篇文章而全部弄懂，但是很遗憾地告诉你，这需要你持续不断地跟进前沿知识。希望你有所收获。</p><p>课外拓展：</p><ul><li><a href="https://baike.baidu.com/item/%E6%AF%9B%E6%9E%9C%E8%8A%B8%E9%A6%99%E7%A2%B1" target="_blank" rel="external">毛果芸香碱</a></li><li><a href="https://baike.baidu.com/item/%E6%96%B0%E6%96%AF%E7%9A%84%E6%98%8E" target="_blank" rel="external">新斯的明</a></li><li><a href="https://baike.baidu.com/item/%E9%9D%92%E5%85%89%E7%9C%BC" target="_blank" rel="external">青光眼</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;乙酰胆碱（下面将以ACH代指）是中枢和外周神经系统的内源性神经递质，作用于 M 胆碱受体和 N 胆碱受体。在这一节里，我们重点介绍ACH的作用，ACH性质不稳定，极易被体内的ACH酶所分解，普通作用于各个器官，对各个器官的选择性较差。&lt;/p&gt;
&lt;p&gt;下面逐个介绍ACH的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;M样作用&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;心血管系统&lt;/p&gt;
&lt;p&gt; 1.1 &lt;strong&gt;舒张血管&lt;/strong&gt; ：ACH 作用血管内皮细胞 M3 受体，引起NO的释放，从而是临近平滑肌松弛，小剂量静脉注射可舒张全身血管。&lt;/p&gt;
&lt;p&gt; 1.2 心脏 ： ACH 减弱心肌收缩力，减慢心率，对心脏产生&lt;strong&gt;负性作用&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;胃肠道&lt;/p&gt;
&lt;p&gt; ACh 兴奋胃肠道平滑肌，&lt;strong&gt;促进胃肠分泌&lt;/strong&gt;，引起恶心、呕吐、腹痛、嗳气&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://hqiwen.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>传出神经系统概论</title>
    <link href="https://hqiwen.github.io/2017/12/25/%E4%BC%A0%E5%87%BA%E7%A5%9E%E7%BB%8F%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/"/>
    <id>https://hqiwen.github.io/2017/12/25/传出神经系统概论/</id>
    <published>2017-12-25T04:41:20.000Z</published>
    <updated>2018-11-23T09:13:10.715Z</updated>
    
    <content type="html"><![CDATA[<p>人是由大脑和脊髓控制的，那么是怎么控制的呢？这就要提到传出神经系统了，传出神经系统是中枢神经（大脑和脊髓）影响外周各个器官的途径，很显然中枢神经不是隔空控制的，并不存在什么黑魔法。现在我们有了传出神经系统，通俗的说就是一个管道，中枢神经系统对你想要处理的器官发出一个指令，这种指令就是神经递质。你可能已经猜到，不同的指令那么就会有不同的神经递质，你的想法完全正确，请接着往下走。</p><img src="/2017/12/25/传出神经系统概论/图片1.png" alt="图片1.png" title=""><p>传出神经（管道）、神经递质（指令）还记得吗，下面一个名词——受体，什么是<strong>受体</strong>，接受神经递质并使细胞产生相应的生理效应的细胞结构。不同的人对相同的指令会有不同的反应，不同的器官对相同的神经递质的“脾气”也各不相同。我们可以把“脾气”修改一下，叫做亲和力，是不是瞬间不同了。好，要记得<strong>神经递质——受体</strong>这一组合，我们的结论都将来源于此。<br><a id="more"></a><br>传出神经给你两个选择，乙酰胆碱（ACH）或者去甲肾上腺素（NE），我们马上要提到受体，我希望你还记得，<strong>递质-受体</strong>密不可分，该如何认识他们，下面简要的列了一个图：<br><img src="/2017/12/25/传出神经系统概论/图片2.png" alt="图片2.png" title=""></p><table><thead><tr><th>乙酰胆碱（ACh）</th><th>去加肾上腺素（NE）</th></tr></thead><tbody><tr><td>M胆碱受体</td><td>α肾上腺素受体</td></tr><tr><td>N胆碱受体</td><td>β肾上腺素受体</td></tr></tbody></table><p>好，有了以上知识，开始我们的正题。传出神经可以分为<strong>交感神经</strong>和<strong>副交感神经</strong>。交感神经是主要产生去甲肾上腺素（NE）的主要场所，而副交感神经则是产生乙酰胆碱（ACH）的主要场所。是不是还是很陌生，交感神经是主管<strong>紧张</strong>的，与之相反副交感神经主管<strong>放松</strong>。下面谈一谈交感神经的效应，想一想你紧张的时候会有什么反应，心跳加速，呼吸加速，眼瞳扩大（看远处），骨骼肌血管舒张提供更多营养，消化功能下降以免逃跑的时候肚子疼，泌尿功能下降，这点也省了。好不容易逃跑了，你体内的副交感神经开始体现出优势，心跳放缓，呼吸放缓，眼瞳缩小（看近处），骨骼肌收缩，消化功能上升，泌尿功能上升。（这个划分不是特别具体，以后会具体谈及）</p><p>传出神经通过神经递质作用于效应器，效应器通过细胞膜上的受体来转化中枢神经的信息，形成一个完整的系统。注意到，交感神经与副交感神经的对抗作用，使机体保持在一个相对恒定的环境中，这个动态平衡（<strong>稳态</strong>）的维持是机体健康的关键。下一章将具体到传出神经系统的药的性质和道理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人是由大脑和脊髓控制的，那么是怎么控制的呢？这就要提到传出神经系统了，传出神经系统是中枢神经（大脑和脊髓）影响外周各个器官的途径，很显然中枢神经不是隔空控制的，并不存在什么黑魔法。现在我们有了传出神经系统，通俗的说就是一个管道，中枢神经系统对你想要处理的器官发出一个指令，这种指令就是神经递质。你可能已经猜到，不同的指令那么就会有不同的神经递质，你的想法完全正确，请接着往下走。&lt;/p&gt;
&lt;img src=&quot;/2017/12/25/传出神经系统概论/图片1.png&quot; alt=&quot;图片1.png&quot; title=&quot;&quot;&gt;
&lt;p&gt;传出神经（管道）、神经递质（指令）还记得吗，下面一个名词——受体，什么是&lt;strong&gt;受体&lt;/strong&gt;，接受神经递质并使细胞产生相应的生理效应的细胞结构。不同的人对相同的指令会有不同的反应，不同的器官对相同的神经递质的“脾气”也各不相同。我们可以把“脾气”修改一下，叫做亲和力，是不是瞬间不同了。好，要记得&lt;strong&gt;神经递质——受体&lt;/strong&gt;这一组合，我们的结论都将来源于此。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://hqiwen.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>为你写诗</title>
    <link href="https://hqiwen.github.io/2017/09/24/%E4%B8%BA%E4%BD%A0%E5%86%99%E8%AF%97/"/>
    <id>https://hqiwen.github.io/2017/09/24/为你写诗/</id>
    <published>2017-09-24T02:26:50.000Z</published>
    <updated>2018-11-23T09:12:40.154Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/09/24/为你写诗/image.jpg" alt="image.jpg" title=""><p>站在武科大</p><p>为你写诗</p><p>是夜，带着雨</p><p>朦胧的雾气</p><p>你从雨中闯出来</p><p>站在黄家湖畔</p><p>为你写诗</p><p>梦脱身为湖</p><p>藏着一个美丽的倩影<br><a id="more"></a><br>站在高高的云端</p><p>为你写诗</p><p>天空无穷</p><p>相思不穷</p><p>站在过去与未来之间</p><p>为你写诗</p><p>点亮的灯火</p><p>点亮的心</p><p>却不知在站那里</p><p>再见到你</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/09/24/为你写诗/image.jpg&quot; alt=&quot;image.jpg&quot; title=&quot;&quot;&gt;
&lt;p&gt;站在武科大&lt;/p&gt;
&lt;p&gt;为你写诗&lt;/p&gt;
&lt;p&gt;是夜，带着雨&lt;/p&gt;
&lt;p&gt;朦胧的雾气&lt;/p&gt;
&lt;p&gt;你从雨中闯出来&lt;/p&gt;
&lt;p&gt;站在黄家湖畔&lt;/p&gt;
&lt;p&gt;为你写诗&lt;/p&gt;
&lt;p&gt;梦脱身为湖&lt;/p&gt;
&lt;p&gt;藏着一个美丽的倩影&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://hqiwen.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>晨</title>
    <link href="https://hqiwen.github.io/2017/09/24/%E6%99%A8/"/>
    <id>https://hqiwen.github.io/2017/09/24/晨/</id>
    <published>2017-09-24T02:24:03.000Z</published>
    <updated>2018-11-23T09:13:28.986Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/09/24/晨/images.jpg" alt="images.jpg" title=""><p>晨</p><p>偷着光</p><p>献给了早起的我们</p><p>没有你的早上 一望无际</p><p>带着呆呆的蓝</p><p>钥匙碰转出清脆的乐<br><a id="more"></a><br>起伏</p><p>像谜一样的切合</p><p>脚下的步伐</p><p>四下里无人</p><p>蹲下来</p><p>在地上写的你的名字</p><p>走过</p><p>这条来时的路</p><p>不止一次往回望</p><p>踩着尘土</p><p>我们走向前去</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/09/24/晨/images.jpg&quot; alt=&quot;images.jpg&quot; title=&quot;&quot;&gt;
&lt;p&gt;晨&lt;/p&gt;
&lt;p&gt;偷着光&lt;/p&gt;
&lt;p&gt;献给了早起的我们&lt;/p&gt;
&lt;p&gt;没有你的早上 一望无际&lt;/p&gt;
&lt;p&gt;带着呆呆的蓝&lt;/p&gt;
&lt;p&gt;钥匙碰转出清脆的乐&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://hqiwen.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>秋日遐想</title>
    <link href="https://hqiwen.github.io/2017/09/24/%E7%A7%8B%E6%97%A5%E9%81%90%E6%83%B3/"/>
    <id>https://hqiwen.github.io/2017/09/24/秋日遐想/</id>
    <published>2017-09-24T02:21:01.000Z</published>
    <updated>2018-11-23T09:13:42.799Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/09/24/秋日遐想/image.jpg" alt="image.jpg" title=""><p>叶子</p><p>黄</p><p>又带着风</p><p>偏偏地</p><p>落下来</p><p>追逐着的</p><p>记忆与成熟</p><p>缓了下来<br><a id="more"></a><br>梦里</p><p>吟唱着的</p><p>金色的麦田</p><p>荡漾在粼粼的河里</p><p>画</p><p>那么一副色调</p><p>蓝色的忧郁</p><p>沿着路扩展</p><p>谁又曾想</p><p>黑夜的悸动</p><p>藏一个</p><p>不知名的阶梯</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/09/24/秋日遐想/image.jpg&quot; alt=&quot;image.jpg&quot; title=&quot;&quot;&gt;
&lt;p&gt;叶子&lt;/p&gt;
&lt;p&gt;黄&lt;/p&gt;
&lt;p&gt;又带着风&lt;/p&gt;
&lt;p&gt;偏偏地&lt;/p&gt;
&lt;p&gt;落下来&lt;/p&gt;
&lt;p&gt;追逐着的&lt;/p&gt;
&lt;p&gt;记忆与成熟&lt;/p&gt;
&lt;p&gt;缓了下来&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://hqiwen.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
