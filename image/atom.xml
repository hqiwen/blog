<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知秋</title>
  
  <subtitle>a little happy to share with you</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hqiwen.github.io/"/>
  <updated>2017-12-25T04:54:21.934Z</updated>
  <id>https://hqiwen.github.io/</id>
  
  <author>
    <name>贺启文</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>传出神经系统概论</title>
    <link href="https://hqiwen.github.io/2017/12/25/%E4%BC%A0%E5%87%BA%E7%A5%9E%E7%BB%8F%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/"/>
    <id>https://hqiwen.github.io/2017/12/25/传出神经系统概论/</id>
    <published>2017-12-25T04:41:20.000Z</published>
    <updated>2017-12-25T04:54:21.934Z</updated>
    
    <content type="html"><![CDATA[<p>人是由大脑和脊髓控制的，那么是怎么控制的呢？这就要提到传出神经系统了，传出神经系统是中枢神经（大脑和脊髓）影响外周各个器官的途径，很显然中枢神经不是隔空控制的，并不存在什么黑魔法。现在我们有了传出神经系统，通俗的说就是一个管道，中枢神经系统对你想要处理的器官发出一个指令，这种指令就是神经递质。你可能已经猜到，不同的指令那么就会有不同的神经递质，你的想法完全正确，请接着往下走。</p><img src="/2017/12/25/传出神经系统概论/图片1.png" alt="图片1.png" title=""><p>传出神经（管道）、神经递质（指令）还记得吗，下面一个名词——受体，什么是<strong>受体</strong>，接受神经递质并使细胞产生相应的生理效应的细胞结构。不同的人对相同的指令会有不同的反应，不同的器官对相同的神经递质的“脾气”也各不相同。我们可以把“脾气”修改一下，叫做亲和力，是不是瞬间不同了。好，要记得<strong>神经递质——受体</strong>这一组合，我们的结论都将来源于此。</p><p>传出神经给你两个选择，乙酰胆碱（ACH）或者去甲肾上腺素（NE），我们马上要提到受体，我希望你还记得，<strong>递质-受体</strong>密不可分，该如何认识他们，下面简要的列了一个图：<br><img src="/2017/12/25/传出神经系统概论/图片2.png" alt="图片2.png" title=""></p><table><thead><tr><th>乙酰胆碱（ACh）</th><th>去加肾上腺素（NE）</th></tr></thead><tbody><tr><td>M胆碱受体</td><td>α肾上腺素受体</td></tr><tr><td>N胆碱受体</td><td>β肾上腺素受体</td></tr></tbody></table><p>好，有了以上知识，开始我们的正题。传出神经可以分为<strong>交感神经</strong>和<strong>副交感神经</strong>。交感神经是主要产生去甲肾上腺素（NE）的主要场所，而副交感神经则是产生乙酰胆碱（ACH）的主要场所。是不是还是很陌生，交感神经是主管<strong>紧张</strong>的，与之相反副交感神经主管<strong>放松</strong>。下面谈一谈交感神经的效应，想一想你紧张的时候会有什么反应，心跳加速，呼吸加速，眼瞳扩大（看远处），骨骼肌血管舒张提供更多营养，消化功能下降以免逃跑的时候肚子疼，泌尿功能下降，这点也省了。好不容易逃跑了，你体内的副交感神经开始体现出优势，心跳放缓，呼吸放缓，眼瞳缩小（看近处），骨骼肌收缩，消化功能上升，泌尿功能上升。（这个划分不是特别具体，以后会具体谈及）</p><p>传出神经通过神经递质作用于效应器，效应器通过细胞膜上的受体来转化中枢神经的信息，形成一个完整的系统。注意到，交感神经与副交感神经的对抗作用，使机体保持在一个相对恒定的环境中，这个动态平衡（<strong>稳态</strong>）的维持是机体健康的关键。下一章将具体到传出神经系统的药的性质和道理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人是由大脑和脊髓控制的，那么是怎么控制的呢？这就要提到传出神经系统了，传出神经系统是中枢神经（大脑和脊髓）影响外周各个器官的途径，很显然中枢神经不是隔空控制的，并不存在什么黑魔法。现在我们有了传出神经系统，通俗的说就是一个管道，中枢神经系统对你想要处理的器官发出一个指令，这
      
    
    </summary>
    
      <category term="医药" scheme="https://hqiwen.github.io/categories/%E5%8C%BB%E8%8D%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>精读前后端渲染之争</title>
    <link href="https://hqiwen.github.io/2017/09/24/%E5%89%8D%E5%90%8E%E7%AB%AF%E6%B8%B2%E6%9F%93%E5%AF%B9%E6%AF%94/"/>
    <id>https://hqiwen.github.io/2017/09/24/前后端渲染对比/</id>
    <published>2017-09-24T02:42:54.102Z</published>
    <updated>2017-12-25T05:00:03.791Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转载自<a href="https://medium.freecodecamp.com/heres-why-client-side-rendering-won-46a349fadb52" target="_blank" rel="external">Here’s why Client-side Rendering Won</a>,如果想获得更好的阅读体验，请阅读原文</p></blockquote><p>1 引言</p><p>我为什么要选这篇文章呢？</p><img src="/2017/09/24/前后端渲染对比/ca1b6618-2209-11e7-99ae-c2a75ad3dabb.png" alt="ca1b6618-2209-11e7-99ae-c2a75ad3dabb.png" title=""><p>十年前，几乎所有网站都使用 ASP、Java、PHP 这类做后端渲染，但后来随着 jQuery、Angular、React、Vue 等 JS 框架的崛起，开始转向了前端渲染。从 2014 年起又开始流行了同构渲染，号称是未来，集成了前后端渲染的优点，但转眼间三年过去了，很多当时壮心满满的框架（rendr、Lazo）从先驱变成了先烈。同构到底是不是未来？自己的项目该如何选型？我想不应该只停留在追求热门和拘泥于固定模式上，忽略了前后端渲染之“争”的“核心点”，关注如何提升“用户体验”。</p><p>原文分析了前端渲染的优势，并没有进行深入探讨。我想以它为切入口来深入探讨一下。</p><p>明确三个概念：「后端渲染」指传统的 ASP、Java 或 PHP 的渲染机制；「前端渲染」指使用 JS 来渲染页面大部分内容，代表是现在流行的 SPA 单页面应用；「同构渲染」指前后端共用 JS，首次渲染时使用 Node.js 来直出 HTML。一般来说同构渲染是介于前后端中的共有部分。<br><a id="more"></a><br>2 内容概要</p><p>前端渲染的优势</p><ul><li>局部刷新。无需每次都进行完整页面请求</li><li>懒加载。如在页面初始时只加载可视区域内的数据，滚动后rp加载其它数据，可以通过 react-lazyload 实现</li><li>富交互。使用 JS 实现各种酷炫效果</li><li>节约服务器成本。省电省钱，JS 支持 CDN 部署，且部署极其简单，只需要服务器支持静态文件即可</li><li>天生的关注分离设计。服务器来访问数据库提供接口，JS 只关注数据获取和展现</li><li>JS 一次学习，到处使用。可以用来开发 Web、Serve、Mobile、Desktop 类型的应用</li></ul><img src="/2017/09/24/前后端渲染对比/68747470733a2f2f706963312e7a68696d672e636f6d2f76322d37623034616335636165363466613737343061316466623162663862303963345f622e706e67.png" alt="68747470733a2f2f706963312e7a68696d672e636f6d2f76322d37623034616335636165363466613737343061316466623162663862303963345f622e706e67.png" title=""><p>后端渲染的优势</p><ul><li>服务端渲染不需要先下载一堆 js 和 css 后才能看到页面（首屏性能）</li><li>SEO</li><li>服务端渲染不用关心浏览器兼容性问题（随意浏览器发展，这个优点逐渐消失）</li><li>对于电量不给力的手机或平板，减少在客户端的电量消耗很重要</li><li>以上服务端优势其实只有首屏性能和 SEO 两点比较突出。但现在这两点也慢慢变得微不足道了。React 这类支持同构的框架已经能解决这个问题，尤其是 Next.js 让同构开发变得非常容易。还有静态站点的渲染，但这类应用本身复杂度低，很多前端框架已经能完全囊括。</li></ul><p>3 精读</p><p>前端渲染遇到的问题</p><p>  前端渲染主要面临的问题有两个 SEO、首屏性能。<br>  SEO 很好理解。由于传统的搜索引擎只会从 HTML 中抓取数据，导致前端渲染的页面无法被抓取。前端渲染常使用的 SPA 会把所有 JS 整体打包，无法忽视的问题就是文件太大，导致渲染前等待很长时间。特别是网速差的时候，让用户等待白屏结束并非一个很好的体验。</p><p>同构的优点</p><p>同构恰恰就是为了解决前端渲染遇到的问题才产生的，至 2014 年底伴随着 React 的崛起而被认为是前端框架应具备的一大杀器，以至于当时很多人为了用此特性而放弃 Angular 1 而转向 React。然而近3年过去了，很多产品逐渐从全栈同构的理想化逐渐转到首屏或部分同构。让我们再一次思考同构的优点真是优点吗？</p><ul><li><p>有助于 SEO</p><p>首先确定你的应用是否都要做 SEO，如果是一个后台应用，那么只要首页做一些静态内容宣导就可以了。如果是内容型的网站，那么可以考虑专门做一些页面给搜索引擎</p><p>时到今日，谷歌已经能够可以在爬虫中执行 JS 像浏览器一样理解网页内容，只需要往常一样使用 JS 和 CSS 即可。并且尽量使用新规范，使用 pushstate 来替代以前的 hashstate。不同的搜索引擎的爬虫还不一样，要做一些配置的工作，而且可能要经常关注数据，有波动那么可能就需要更新。第二是该做 sitemap 的还得做。相信未来即使是纯前端渲染的页面，爬虫也能很好的解析。</p></li><li><p>共用前端代码，节省开发时间</p><p>其实同构并没有节省前端的开发量，只是把一部分前端代码拿到服务端执行。而且为了同构还要处处兼容 Node.js 不同的执行环境。有额外成本，这也是后面会具体谈到的。</p></li><li><p>提高首屏性能</p><p>由于 SPA 打包生成的 JS 往往都比较大，会导致页面加载后花费很长的时间来解析，也就造成了白屏问题。服务端渲染可以预先使到数据并渲染成最终 HTML 直接展示，理想情况下能避免白屏问题。在我参考过的一些产品中，很多页面需要获取十几个接口的数据，单是数据获取的时候都会花费数秒钟，这样全部使用同构反而会变慢。</p></li></ul><p>同构并没有想像中那么美</p><ul><li><p>性能</p><p>把原来放在几百万浏览器端的工作拿过来给你几台服务器做，这还是花挺多计算力的。尤其是涉及到图表类需要大量计算的场景。这方面调优，可以参考 walmart的调优策略。</p><p>个性化的缓存是遇到的另外一个问题。可以把每个用户个性化信息缓存到浏览器，这是一个天生的分布式缓存系统。我们有个数据类应用通过在浏览器合理设置缓存，双十一当天节省了 70% 的请求量。试想如果这些缓存全部放到服务器存储，需要的存储空间和计算都是很非常大。</p></li><li><p>不容忽视的服务器端和浏览器环境差异</p><p>前端代码在编写时并没有过多的考虑后端渲染的情景，因此各种 BOM 对象和 DOM API 都是拿来即用。这从客观层面也增加了同构渲染的难度。我们主要遇到了以下几个问题：<br>document 等对象找不到的问题</p></li><li><p>DOM 计算报错的问题</p></li><li><p>前端渲染和服务端渲染内容不一致的问题</p><p>由于前端代码使用的  window  在 node 环境是不存在的，所以要 mock window，其中最重要的是 cookie，userAgent，location。但是由于每个用户访问时是不一样的  window ，那么就意味着你得每次都更新  window 。</p><p>而服务端由于 js require 的 cache 机制，造成前端代码除了具体渲染部分都只会加载一遍。这时候  window  就得不到更新了。所以要引入一个合适的更新机制，比如把读取改成每次用的时候再读取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export const isSsr = () =&gt; (</div><div class="line">  !(typeof window !== &apos;undefined&apos; &amp;&amp; window.document &amp;&amp; window.document.createElement &amp;&amp; window.setTimeout)</div><div class="line">  );</div></pre></td></tr></table></figure><p>原因是很多 DOM 计算在 SSR 的时候是无法进行的，涉及到 DOM 计算的的内容不可能做到 SSR 和 CSR 完全一致，这种不一致可能会带来页面的闪动。</p></li><li><p>内存溢出</p><p>前端代码由于浏览器环境刷新一遍内存重置的天然优势，对内存溢出的风险并没有考虑充分。</p><p>比如在 React 的  componentWillMount  里做绑定事件就会发生内存溢出，因为 React 的设计是后端渲染只会运行  componentDidMount  之前的操作，而不会运行  componentWillUnmount方法（一般解绑事件在这里）。</p></li><li><p>异步操作</p><p>前端可以做非常复杂的请求合并和延迟处理，但为了同构，所有这些请求都在预先拿到结果才会渲染。而往往这些请求是有很多依赖条件的，很难调和。纯 React 的方式会把这些数据以埋点的方式打到页面上，前端不再发请求，但仍然再渲染一遍来比对数据。造成的结果是流程复杂，大规模使用成本高。幸运的是 Next.js 解决了这一些，后面会谈到。</p></li></ul><p>总的来说，同构渲染实施难度大，不够优雅，无论在前端还是服务端，都需要额外改造。</p><hr><p>首屏优化</p><p>再回到前端渲染遇到首屏渲染问题，除了同构就没有其它解法了吗？总结以下可以通过以下三步解决</p><ul><li><p>分拆打包</p><p>现在流行的路由库如 react-router 对分拆打包都有很好的支持。可以按照页面对包进行分拆，并在页面切换时加上一些 loading 和 transition 效果。</p></li><li><p>交互优化</p><p>首次渲染的问题可以用更好的交互来解决，先看下 linkedin 的渲染</p><img src="/2017/09/24/前后端渲染对比/68747470733a2f2f696d672e616c6963646e2e636f6d2f7466732f5442314a6a6b5151705858585858536158585858585858585858582d323535342d313430302e706e67.png" alt="68747470733a2f2f696d672e616c6963646e2e636f6d2f7466732f5442314a6a6b5151705858585858536158585858585858585858582d323535342d313430302e706e67.png" title=""><img src="/2017/09/24/前后端渲染对比/68747470733a2f2f696d672e616c6963646e2e636f6d2f7466732f54423169614d4d51705858585858766158585858585858585858582d323535342d313335342e706e67.png" alt="68747470733a2f2f696d672e616c6963646e2e636f6d2f7466732f54423169614d4d51705858585858766158585858585858585858582d323535342d313335342e706e67.png" title=""><p>有什么感受，非常自然，打开渲染并没有白屏，有两段加载动画，第一段像是加载资源，第二段是一个加载占位器，过去我们会用 loading 效果，但过渡性不好。近年流行 Skeleton Screen 效果。其实就是在白屏无法避免的时候，为了解决等待加载过程中白屏或者界面闪烁造成的割裂感带来的解决方案。</p></li><li><p>部分同构</p><p>部分同构可以降低成功同时利用同构的优点，如把核心的部分如菜单通过同构的方式优先渲染出来。我们现在的做法就是使用同构把菜单和页面骨架渲染出来。给用户提示信息，减少无端的等待时间。</p></li></ul><p>相信有了以上三步之后，首屏问题已经能有很大改观。相对来说体验提升和同构不分伯仲，而且相对来说对原来架构破坏性小，入侵性小。是我比较推崇的方案。</p><p>3 总结</p><p>我们赞成客户端渲染是未来的主要方向，服务端则会专注于在数据和业务处理上的优势。但由于日趋复杂的软硬件环境和用户体验更高的追求，也不能只拘泥于完全的客户端渲染。同构渲染看似美好，但以目前的发展程度来看，在大型项目中还不具有足够的应用价值，但不妨碍部分使用来优化首屏性能。做同构之前 ，一定要考虑到浏览器和服务器的环境差异，站在更高层面考虑。</p><p>附：Next.js 体验</p><p><a href="https://github.com/zeit/next.js/" target="_blank" rel="external">Next.js</a> 是时下非常流行的基于 React 的同构开发框架。作者之一就是大名鼎鼎的 Socket.io 的作者 Guillermo Rauch。它有以下几个亮点特别吸引我：</p><ul><li>巧妙地用标准化的解决了请求的问题。同构和页面开发类似，异步是个大难题，异步中难点又在接口请求。Next.js 给组件新增了 getInitialProps 方法来专门处理初始化请求，再也不用手动往页面上塞 DATA 和调用 ReactDOMServer.renderToString</li><li>使用 styled-jsx 解决了 css-in-js 的问题。这种方案虽然不像 styled-component 那样强大，但足够简单，可以说是最小的成本解决了问题</li><li>Fast by default。页面默认拆分文件方式打包，支持Prefetch页面预加载</li><li>全家桶式的的解决方案。简洁清晰的目录结构，这一点 Redux 等框架真应该学一学。不过全家桶的方案比较适合全新项目使用，旧项目使用要评估好成本</li></ul><p>讨论地址是：<a href="https://github.com/camsong/blog/issues/8" target="_blank" rel="external">前后端渲染之争 · Issue #5 · dt-fe/weekly</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文转载自&lt;a href=&quot;https://medium.freecodecamp.com/heres-why-client-side-rendering-won-46a349fadb52&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Here’s why Client-side Rendering Won&lt;/a&gt;,如果想获得更好的阅读体验，请阅读原文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1 引言&lt;/p&gt;
&lt;p&gt;我为什么要选这篇文章呢？&lt;/p&gt;
&lt;img src=&quot;/2017/09/24/前后端渲染对比/ca1b6618-2209-11e7-99ae-c2a75ad3dabb.png&quot; alt=&quot;ca1b6618-2209-11e7-99ae-c2a75ad3dabb.png&quot; title=&quot;&quot;&gt;
&lt;p&gt;十年前，几乎所有网站都使用 ASP、Java、PHP 这类做后端渲染，但后来随着 jQuery、Angular、React、Vue 等 JS 框架的崛起，开始转向了前端渲染。从 2014 年起又开始流行了同构渲染，号称是未来，集成了前后端渲染的优点，但转眼间三年过去了，很多当时壮心满满的框架（rendr、Lazo）从先驱变成了先烈。同构到底是不是未来？自己的项目该如何选型？我想不应该只停留在追求热门和拘泥于固定模式上，忽略了前后端渲染之“争”的“核心点”，关注如何提升“用户体验”。&lt;/p&gt;
&lt;p&gt;原文分析了前端渲染的优势，并没有进行深入探讨。我想以它为切入口来深入探讨一下。&lt;/p&gt;
&lt;p&gt;明确三个概念：「后端渲染」指传统的 ASP、Java 或 PHP 的渲染机制；「前端渲染」指使用 JS 来渲染页面大部分内容，代表是现在流行的 SPA 单页面应用；「同构渲染」指前后端共用 JS，首次渲染时使用 Node.js 来直出 HTML。一般来说同构渲染是介于前后端中的共有部分。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://hqiwen.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端渲染,后端渲染" scheme="https://hqiwen.github.io/tags/%E5%89%8D%E7%AB%AF%E6%B8%B2%E6%9F%93-%E5%90%8E%E7%AB%AF%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>为你写诗</title>
    <link href="https://hqiwen.github.io/2017/09/24/%E4%B8%BA%E4%BD%A0%E5%86%99%E8%AF%97/"/>
    <id>https://hqiwen.github.io/2017/09/24/为你写诗/</id>
    <published>2017-09-24T02:26:50.000Z</published>
    <updated>2017-12-25T04:59:15.802Z</updated>
    
    <content type="html"><![CDATA[<p>站在武科大</p><p>为你写诗</p><p>是夜，带着雨</p><p>朦胧的雾气</p><p>你从雨中闯出来</p><p>站在黄家湖畔</p><p>为你写诗</p><p>梦脱身为湖</p><p>藏着一个美丽的倩影<br><a id="more"></a><br>站在高高的云端</p><p>为你写诗</p><p>天空无穷</p><p>相思不穷</p><p>站在过去与未来之间</p><p>为你写诗</p><p>点亮的灯火</p><p>点亮的心</p><p>却不知在站那里</p><p>再见到你</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;站在武科大&lt;/p&gt;
&lt;p&gt;为你写诗&lt;/p&gt;
&lt;p&gt;是夜，带着雨&lt;/p&gt;
&lt;p&gt;朦胧的雾气&lt;/p&gt;
&lt;p&gt;你从雨中闯出来&lt;/p&gt;
&lt;p&gt;站在黄家湖畔&lt;/p&gt;
&lt;p&gt;为你写诗&lt;/p&gt;
&lt;p&gt;梦脱身为湖&lt;/p&gt;
&lt;p&gt;藏着一个美丽的倩影&lt;br&gt;
    
    </summary>
    
      <category term="诗歌" scheme="https://hqiwen.github.io/categories/%E8%AF%97%E6%AD%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>晨</title>
    <link href="https://hqiwen.github.io/2017/09/24/%E6%99%A8/"/>
    <id>https://hqiwen.github.io/2017/09/24/晨/</id>
    <published>2017-09-24T02:24:03.000Z</published>
    <updated>2017-12-25T04:59:36.568Z</updated>
    
    <content type="html"><![CDATA[<p>晨</p><p>偷着光</p><p>献给了早起的我们</p><p>没有你的早上 一望无际</p><p>带着呆呆的蓝</p><p>钥匙碰转出清脆的乐<br><a id="more"></a><br>起伏</p><p>像谜一样的切合</p><p>脚下的步伐</p><p>四下里无人</p><p>蹲下来</p><p>在地上写的你的名字</p><p>走过</p><p>这条来时的路</p><p>不止一次往回望</p><p>踩着尘土</p><p>我们走向前去</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;晨&lt;/p&gt;
&lt;p&gt;偷着光&lt;/p&gt;
&lt;p&gt;献给了早起的我们&lt;/p&gt;
&lt;p&gt;没有你的早上 一望无际&lt;/p&gt;
&lt;p&gt;带着呆呆的蓝&lt;/p&gt;
&lt;p&gt;钥匙碰转出清脆的乐&lt;br&gt;
    
    </summary>
    
      <category term="诗歌" scheme="https://hqiwen.github.io/categories/%E8%AF%97%E6%AD%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>秋日遐想</title>
    <link href="https://hqiwen.github.io/2017/09/24/%E7%A7%8B%E6%97%A5%E9%81%90%E6%83%B3/"/>
    <id>https://hqiwen.github.io/2017/09/24/秋日遐想/</id>
    <published>2017-09-24T02:21:01.000Z</published>
    <updated>2017-12-25T04:59:48.853Z</updated>
    
    <content type="html"><![CDATA[<p>叶子</p><p>黄</p><p>又带着风</p><p>偏偏地</p><p>落下来</p><p>追逐着的</p><p>记忆与成熟</p><p>缓了下来<br><a id="more"></a><br>梦里</p><p>吟唱着的</p><p>金色的麦田</p><p>荡漾在粼粼的河里</p><p>画</p><p>那么一副色调</p><p>蓝色的忧郁</p><p>沿着路扩展</p><p>谁又曾想</p><p>黑夜的悸动</p><p>藏一个</p><p>不知名的阶梯</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;叶子&lt;/p&gt;
&lt;p&gt;黄&lt;/p&gt;
&lt;p&gt;又带着风&lt;/p&gt;
&lt;p&gt;偏偏地&lt;/p&gt;
&lt;p&gt;落下来&lt;/p&gt;
&lt;p&gt;追逐着的&lt;/p&gt;
&lt;p&gt;记忆与成熟&lt;/p&gt;
&lt;p&gt;缓了下来&lt;br&gt;
    
    </summary>
    
      <category term="诗歌" scheme="https://hqiwen.github.io/categories/%E8%AF%97%E6%AD%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>滨江</title>
    <link href="https://hqiwen.github.io/2017/09/23/%E6%BB%A8%E6%B1%9F/"/>
    <id>https://hqiwen.github.io/2017/09/23/滨江/</id>
    <published>2017-09-23T05:25:51.000Z</published>
    <updated>2017-12-25T04:59:43.007Z</updated>
    
    <content type="html"><![CDATA[<p>月光撒在身上</p><p>给你平添了一份神圣与高洁</p><p>光的影</p><p>鱼的歌</p><p>你就是这里的主宰</p><p>流动的水波是你灵动的眼眸</p><p>横跨的桥梁是你美丽的发带</p><p>两岸的土地随着你延伸开去</p><p>那是你不一样的宽阔情怀<br><a id="more"></a><br>这里是嘈杂环境里的静地</p><p>我为之欢呼</p><p>对你诉说你的美，你的歌</p><p>你那包容一切的善良</p><p>令人深深着迷</p><p>像一杯酒</p><p>惹人醉，醉了之后还心碎</p><p>我问你你的名字</p><p>你亦沉默不答</p><p>想来</p><p>我不过是个旅人</p><p>这样匆匆</p><p>滨江一夜</p><p>至此无缘再面见你的温柔</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;月光撒在身上&lt;/p&gt;
&lt;p&gt;给你平添了一份神圣与高洁&lt;/p&gt;
&lt;p&gt;光的影&lt;/p&gt;
&lt;p&gt;鱼的歌&lt;/p&gt;
&lt;p&gt;你就是这里的主宰&lt;/p&gt;
&lt;p&gt;流动的水波是你灵动的眼眸&lt;/p&gt;
&lt;p&gt;横跨的桥梁是你美丽的发带&lt;/p&gt;
&lt;p&gt;两岸的土地随着你延伸开去&lt;/p&gt;
&lt;p&gt;那是你不一样的宽阔情怀&lt;br&gt;
    
    </summary>
    
      <category term="诗歌" scheme="https://hqiwen.github.io/categories/%E8%AF%97%E6%AD%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>日历插件制作</title>
    <link href="https://hqiwen.github.io/2017/09/23/%E6%8F%92%E4%BB%B6%E5%88%B6%E4%BD%9C/"/>
    <id>https://hqiwen.github.io/2017/09/23/插件制作/</id>
    <published>2017-09-23T04:08:38.000Z</published>
    <updated>2017-12-25T04:59:28.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="静态页面的编写"><a href="#静态页面的编写" class="headerlink" title="静态页面的编写"></a>静态页面的编写</h2><p>首先要编写一个合理的静态页面，结构要清晰，变量定义实行语义化，实现组件化的思想</p><p>插件分为两个部分，一个表头，一个表体</p><pre><code>&lt;div class=&quot;ul-datepicker-header&quot;&gt;...表头内容 &lt;/div&gt;&lt;div class=&quot;ul-datepicker-body&quot;&gt;...表体内容&lt;/div&gt;</code></pre><hr><a id="more"></a><h2 id="CSS样式的渲染"><a href="#CSS样式的渲染" class="headerlink" title="CSS样式的渲染"></a>CSS样式的渲染</h2><p>合理的采用特定样式，掌握常见的元素的样式的编写，对于特殊的要给予记忆.</p><p>box-shadow,border,padding 要灵活的运用<br>掌握快速布局的方法，一定要能快速的编写样式</p><hr><h2 id="数据的获取"><a href="#数据的获取" class="headerlink" title="数据的获取"></a>数据的获取</h2><p>怎样去获取一个合理的数据，怎样去处理一个数据，合理的去封装一个数据结构</p><p><strong>在处理年月的时候，如何获取正确格式</strong></p><p>注意到月份的范围是0-11，星期是0-6，当数据越界的时候要实行重置</p><pre><code>myDate.getMonth();       //获取当前月份(0-11,0代表1月)myDate.getDate();        //获取当前日(1-31)myDate.getDay();         //获取当前星期X(0-6,0代表星期天)var firstDay = new Date(year, month - 1, 1);var firstDayWeekDay = firstDay.getDay();if (firstDayWeekDay === 0) firstDayWeekDay = 7;//获取一个月的第一天var lastDayOfLastMonth = new Date(year, month - 1, 0);var lastDateOfLastMonth = lastDayOfLastMonth.getDate();//前一月的最后一天</code></pre><p>返回数据</p><pre><code>return {        year:year,        month:month,        days:ret,        /*ret为一个月的数据*/    }</code></pre><p>暴露变量</p><pre><code>window.datepicker = datepicker//暴露一个全局变量，数据是全局变量的一个属性</code></pre><hr><h2 id="数据的调用与渲染"><a href="#数据的调用与渲染" class="headerlink" title="数据的调用与渲染"></a>数据的调用与渲染</h2><p>需要把相应的数据插入到合理的结构中，注意数据的实时性</p><p>结构函数</p><pre><code>datepicker.buildUI = function (year, month){    ...编写结构}</code></pre><p>渲染函数</p><pre><code>datepicker.render = function (direction) {    ...把得到的结构渲染出来   var html = datepicker.buildUI(year, month);   $wrapper = document.querySelector(&apos;.ul-datepicker-wrapper&apos;)   if (!$wrapper) {       $wrapper = document.createElement(&apos;div&apos;);       $wrapper.className = &apos;ul-datepicker-wrapper&apos;;   }   $wrapper.innerHTML = html;   document.body.appendChild($wrapper);}</code></pre><p>功能函数</p><pre><code>datepicker.init = function (input) {       ...实现一定的功能        datepicker.render();        //调渲染    $input.addEventListener(&apos;click&apos;, function () {            ...监控输入框，实现日历的隐藏与显示    },false)    $wrapper.addEventListener(&apos;click&apos;, function (e) {        ...监控切换月份按钮，实现月份的切换和渲染    }    ,false)    $wrapper.addEventListener(&apos;click&apos;, function (e) {        ...监控日期，并获取值传入输入框    },false)}</code></pre><hr><h2 id="分析与改进"><a href="#分析与改进" class="headerlink" title="分析与改进"></a>分析与改进</h2><ul><li>可以在界面结构上进行精简</li><li>显示今日</li><li>显示当月</li></ul><hr><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><img src="/2017/09/23/插件制作/5329960-7709434716c5fcef.png" alt="日历" title="日历"><p>源码地址<a href="https://github.com/hqiwen/datepicker" target="_blank" rel="external">https://github.com/hqiwen/datepicker</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;静态页面的编写&quot;&gt;&lt;a href=&quot;#静态页面的编写&quot; class=&quot;headerlink&quot; title=&quot;静态页面的编写&quot;&gt;&lt;/a&gt;静态页面的编写&lt;/h2&gt;&lt;p&gt;首先要编写一个合理的静态页面，结构要清晰，变量定义实行语义化，实现组件化的思想&lt;/p&gt;
&lt;p&gt;插件分为两个部分，一个表头，一个表体&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;ul-datepicker-header&amp;quot;&amp;gt;
...表头内容 
&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;ul-datepicker-body&amp;quot;&amp;gt;
...表体内容
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="编程" scheme="https://hqiwen.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="插件,HTML" scheme="https://hqiwen.github.io/tags/%E6%8F%92%E4%BB%B6-HTML/"/>
    
  </entry>
  
</feed>
